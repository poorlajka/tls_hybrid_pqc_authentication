#include <array>

#include "test.hpp"
#include "universal_hash.hpp"

#include <catch2/catch_template_test_macros.hpp>
#include <catch2/catch_test_macros.hpp>

const size_t NUM_HASHERS = 4;
const size_t NUM_INPUTS = 8;

// clang-format off

std::array<std::array<uint8_t, 8>, NUM_HASHERS> enc_keys_64 = {{
    {0x46, 0x9b, 0x76, 0x9f, 0xad, 0x27, 0x45, 0x9b},
    {0x35, 0xef, 0x59, 0x5c, 0x24, 0x0a, 0x7c, 0xf7},
    {0x18, 0x7e, 0xde, 0xcb, 0x67, 0x42, 0x71, 0x9c},
    {0xad, 0xd0, 0x5a, 0x3e, 0x7a, 0x26, 0x02, 0xf5},
}};
std::array<std::array<uint8_t, 16>, NUM_HASHERS> enc_keys_128 = {{
    {0x3c, 0x7e, 0x08, 0x15, 0x7b, 0x5b, 0xad, 0x5b, 0xc8, 0x3b, 0xc0, 0x21, 0x35, 0x17, 0x11, 0x11},
    {0xb8, 0x75, 0xed, 0x42, 0xa0, 0x59, 0x54, 0x03, 0x8e, 0xb4, 0x13, 0xb8, 0xc3, 0xe5, 0x80, 0x63},
    {0x36, 0x9a, 0x5e, 0x03, 0xc1, 0x3b, 0x13, 0x0e, 0x7c, 0x7a, 0xbe, 0x4f, 0xc6, 0x3d, 0x5b, 0x3f},
    {0xd0, 0x66, 0x9c, 0xf7, 0x8c, 0x27, 0xd3, 0x57, 0x5c, 0xbe, 0x78, 0x8e, 0xb1, 0x32, 0x08, 0x1f},
}};
std::array<std::array<uint8_t, 24>, NUM_HASHERS> enc_keys_192 = {{
    {0xf2, 0xec, 0xfe, 0xc7, 0x51, 0x06, 0x56, 0x40, 0x98, 0x01, 0x8b, 0xf2, 0xb9, 0xb5, 0x69, 0x4c, 0xae, 0x31, 0xc9, 0x8d, 0x49, 0x7f, 0x5f, 0x90},
    {0xd0, 0xb8, 0x2e, 0x6e, 0x52, 0x7c, 0x92, 0x02, 0x26, 0x0a, 0x3c, 0xe3, 0xe4, 0xe5, 0x31, 0xda, 0x2d, 0x6b, 0x3d, 0x2b, 0x1a, 0xb4, 0xf1, 0xc9},
    {0xe0, 0x74, 0x43, 0x9a, 0xed, 0x88, 0x24, 0x6d, 0xd9, 0x0e, 0xf4, 0xbb, 0xee, 0x75, 0x62, 0x34, 0xc0, 0x95, 0x0f, 0x3a, 0x02, 0x1e, 0xa7, 0xcf},
    {0x03, 0x00, 0xef, 0x99, 0xa7, 0xed, 0x72, 0x50, 0x22, 0x51, 0x92, 0x21, 0xbc, 0x12, 0x73, 0x28, 0x73, 0xe5, 0x6a, 0x60, 0xf4, 0xde, 0x4d, 0xa6},
}};
std::array<std::array<uint8_t, 32>, NUM_HASHERS> enc_keys_256 = {{
    {0x1c, 0x13, 0x0f, 0x3e, 0x92, 0x25, 0x32, 0x5b, 0x54, 0x57, 0xc0, 0x3b, 0x5b, 0x5c, 0x24, 0x29, 0xda, 0x72, 0x62, 0x89, 0x66, 0x55, 0x86, 0xbb, 0x81, 0x79, 0xea, 0x24, 0xb5, 0xd6, 0x15, 0xb2},
    {0x57, 0xca, 0x90, 0x5b, 0xd7, 0x0d, 0xab, 0xd7, 0x35, 0x2e, 0xc7, 0xdd, 0xfd, 0xa3, 0x3c, 0xbd, 0xbb, 0x20, 0xe0, 0xf3, 0x2d, 0xf2, 0x59, 0x85, 0x91, 0x02, 0x80, 0x0e, 0xd4, 0x63, 0xae, 0xde},
    {0x9f, 0x91, 0x45, 0x7f, 0x5a, 0x86, 0x26, 0x1e, 0x56, 0xf3, 0xf8, 0x5a, 0xde, 0x84, 0x72, 0xd1, 0x40, 0x75, 0xb8, 0x42, 0x98, 0xac, 0x95, 0xb8, 0x62, 0x94, 0x3e, 0xce, 0xdc, 0x91, 0x3a, 0x6d},
    {0x02, 0xad, 0x84, 0x5b, 0xc6, 0x2b, 0x60, 0x1a, 0x8e, 0x90, 0xf8, 0xaf, 0xf9, 0x55, 0x39, 0xe1, 0xbd, 0x4d, 0xf4, 0x6d, 0x7d, 0x52, 0x85, 0xe7, 0x6d, 0x55, 0xe1, 0x92, 0x3a, 0x30, 0x06, 0xe8},
}};

std::array<std::array<uint8_t, 8 * NUM_INPUTS>, NUM_HASHERS> enc_inputs_64 = {{
    {0x99, 0xee, 0xe1, 0xa5, 0xb4, 0x9a, 0xda, 0x37, 0xef, 0x5b, 0x1c, 0x69, 0x5b, 0x10, 0x41, 0x34, 0x2b, 0xf3, 0x35, 0xb8, 0x5b, 0x5e, 0x8c, 0xaa, 0x40, 0x71, 0x67, 0xd9, 0xfa, 0xa0, 0xe2, 0x8a, 0xbf, 0xac, 0xa6, 0x3d, 0x0b, 0x75, 0xc4, 0xb7, 0x4e, 0xdc, 0x5e, 0xdb, 0xef, 0x0e, 0xc3, 0xe6, 0xcf, 0xe2, 0x89, 0xfe, 0x23, 0x66, 0x5d, 0xfa, 0x35, 0xce, 0x7a, 0xa1, 0xd5, 0xc1, 0x2f, 0x40},
    {0xaf, 0x67, 0x37, 0x29, 0x2a, 0xce, 0xbb, 0x5b, 0xb3, 0x4b, 0x9c, 0x69, 0xa7, 0xb3, 0x74, 0x9c, 0x33, 0x5e, 0xfd, 0xde, 0xb0, 0x34, 0x73, 0x8e, 0xb7, 0xf3, 0x0d, 0x6a, 0x22, 0x5a, 0xdd, 0x75, 0xd3, 0xd2, 0xd7, 0x0c, 0xc2, 0x68, 0x51, 0x74, 0x2d, 0xc0, 0x25, 0xaa, 0x3a, 0x89, 0x0c, 0x1a, 0x65, 0x91, 0xf3, 0x8a, 0x97, 0xb4, 0xaf, 0x3a, 0x21, 0xf7, 0x0d, 0xd1, 0xb8, 0x1e, 0xe3, 0x60},
    {0x0c, 0x9c, 0x19, 0xcf, 0xbb, 0x5d, 0x30, 0xc8, 0x81, 0x86, 0x12, 0xcf, 0x1a, 0x7d, 0x6b, 0x6c, 0x64, 0xeb, 0xfc, 0xab, 0x4a, 0xea, 0x5e, 0xa4, 0xf4, 0xf3, 0x32, 0xc0, 0x1b, 0x6b, 0xd2, 0x3c, 0x08, 0x2b, 0x31, 0xcb, 0x4b, 0x99, 0x94, 0x2d, 0x87, 0x47, 0x4e, 0x66, 0x59, 0x13, 0xe7, 0x2a, 0xa5, 0x63, 0xad, 0xab, 0x21, 0xb4, 0xff, 0xf1, 0xd9, 0xf6, 0xfe, 0xd2, 0xd8, 0x0f, 0x5e, 0x18},
    {0xed, 0xb3, 0x52, 0xa6, 0x4f, 0xe9, 0xa5, 0xe3, 0xca, 0x48, 0x51, 0x57, 0xf2, 0xbd, 0x9c, 0x19, 0x42, 0x39, 0x65, 0xf1, 0x56, 0x01, 0x2d, 0x5c, 0x96, 0x03, 0xa5, 0xf8, 0xf5, 0xeb, 0x03, 0x2f, 0x06, 0xd7, 0x84, 0x39, 0xe0, 0x77, 0x04, 0xa6, 0xbf, 0x00, 0x83, 0x90, 0xba, 0x6d, 0x08, 0x0e, 0x4f, 0x27, 0xb5, 0x75, 0x8d, 0x24, 0xe1, 0x39, 0x1c, 0x1b, 0x1d, 0x47, 0x08, 0xb1, 0x20, 0x3d},
}};
std::array<std::array<uint8_t, 16 * NUM_INPUTS>, NUM_HASHERS> enc_inputs_128 = {{
    {0xc1, 0x32, 0xc1, 0xd8, 0xa2, 0x79, 0x9c, 0x02, 0x32, 0x3a, 0xb5, 0x56, 0x8c, 0x8c, 0x17, 0x90, 0xa7, 0xe3, 0x6a, 0x51, 0x07, 0xc2, 0xea, 0xd4, 0x5d, 0x40, 0x52, 0x37, 0x0f, 0x9c, 0xd5, 0x9e, 0xae, 0x08, 0x81, 0x24, 0x40, 0x0d, 0x65, 0x9c, 0x7e, 0xc2, 0xca, 0xe6, 0x30, 0x5a, 0x24, 0x86, 0xa0, 0x30, 0x10, 0xc7, 0x02, 0xc2, 0x0b, 0x8b, 0xbf, 0xac, 0x6a, 0x32, 0x6e, 0x5e, 0x14, 0xa4, 0x10, 0xa6, 0xfc, 0x5d, 0x59, 0xda, 0x47, 0xbd, 0x20, 0x89, 0x53, 0xc2, 0x86, 0xf7, 0xde, 0x36, 0x6c, 0x56, 0x3f, 0x34, 0xb5, 0x07, 0xa0, 0xd0, 0xa9, 0x23, 0xed, 0xab, 0x43, 0x64, 0x31, 0xbd, 0x1c, 0xa7, 0x4f, 0x9b, 0xbb, 0x13, 0x04, 0xfb, 0x69, 0x74, 0xa1, 0x42, 0x98, 0x56, 0x92, 0x23, 0x14, 0x76, 0xbc, 0x0f, 0xa8, 0xe4, 0x68, 0x78, 0x04, 0x7b, 0xb3, 0xb7, 0x19, 0x02, 0xad, 0xd7},
    {0x9b, 0x44, 0x18, 0xcd, 0xa7, 0xe2, 0x07, 0x24, 0x95, 0x68, 0x7e, 0x10, 0x0f, 0xf3, 0x9c, 0x47, 0x9c, 0xe2, 0xfc, 0x66, 0x1b, 0xfb, 0x38, 0x70, 0xea, 0x7e, 0xbd, 0x18, 0xb1, 0x7e, 0xac, 0xd1, 0x50, 0x6f, 0xca, 0x6f, 0xf9, 0xee, 0x21, 0x20, 0x79, 0xe3, 0x27, 0x79, 0xcb, 0x18, 0xb4, 0x86, 0xb9, 0x89, 0x98, 0xeb, 0x8d, 0xa1, 0x8a, 0x9c, 0x64, 0xfb, 0x28, 0xa2, 0x08, 0x3a, 0x44, 0x7a, 0x7c, 0x5f, 0x30, 0xf4, 0xb7, 0xe9, 0xd3, 0xde, 0x16, 0x90, 0x11, 0xbc, 0x1e, 0x35, 0xd6, 0xde, 0xf5, 0xab, 0x75, 0xd2, 0x96, 0x23, 0x07, 0xfc, 0x53, 0xaf, 0xef, 0x14, 0x7d, 0x7c, 0x8f, 0xcc, 0xff, 0xc4, 0x29, 0x00, 0xfb, 0x94, 0x24, 0x80, 0x7f, 0x8b, 0x52, 0x9f, 0xf3, 0x3c, 0xf5, 0xd9, 0x5f, 0xca, 0x80, 0x4f, 0x18, 0xd5, 0x1c, 0x38, 0xa5, 0x08, 0x4b, 0x30, 0xfc, 0x10, 0xb3, 0x73},
    {0x4d, 0x28, 0xdd, 0x65, 0xb4, 0x2f, 0x82, 0x45, 0x55, 0xc1, 0x00, 0x1d, 0x5c, 0xed, 0xef, 0xf7, 0x85, 0xe6, 0x01, 0xb2, 0x8f, 0xc4, 0x0a, 0x40, 0x14, 0xd1, 0xf6, 0xdd, 0xb2, 0x46, 0x44, 0x95, 0x42, 0xf3, 0x06, 0x4d, 0x96, 0x89, 0xfd, 0x53, 0xf6, 0x33, 0xda, 0x8c, 0x28, 0xd6, 0x81, 0xd1, 0x89, 0x4f, 0x92, 0x8f, 0xfe, 0x82, 0xa8, 0x83, 0xc9, 0xb7, 0xa8, 0xd3, 0x91, 0x52, 0x72, 0x8d, 0xf4, 0x9d, 0xff, 0xbc, 0x34, 0x34, 0x06, 0x80, 0x2e, 0x49, 0x47, 0x51, 0xa0, 0xb8, 0xd8, 0x8f, 0x77, 0x15, 0xc8, 0x78, 0x2b, 0xe8, 0xc2, 0xfc, 0xc7, 0xb3, 0x88, 0x04, 0xf1, 0x6b, 0xe5, 0xdf, 0xee, 0xae, 0x28, 0xe0, 0x26, 0xc9, 0x0a, 0x02, 0x18, 0x48, 0xc2, 0x1c, 0x90, 0x5b, 0xdc, 0x2f, 0x72, 0xda, 0xbd, 0x03, 0x2b, 0xd4, 0x61, 0x9e, 0x62, 0x88, 0x19, 0xba, 0xe5, 0x9f, 0x76, 0xa0},
    {0x2f, 0xda, 0x18, 0x12, 0xf8, 0x43, 0x82, 0xd7, 0x41, 0xf6, 0xfa, 0x44, 0x40, 0x3a, 0x3d, 0xc1, 0x70, 0x69, 0xf9, 0x93, 0x8e, 0xbf, 0xaa, 0xc3, 0xcb, 0xd6, 0x2d, 0x7b, 0x23, 0x54, 0x42, 0xe5, 0xda, 0xe0, 0x74, 0x50, 0xe5, 0xd8, 0x55, 0x2d, 0xba, 0x9b, 0x94, 0x50, 0x5a, 0x4b, 0xef, 0x23, 0xdc, 0x04, 0x77, 0x3a, 0x19, 0x46, 0xee, 0xa4, 0x26, 0x58, 0x08, 0x16, 0x07, 0xda, 0x82, 0x79, 0x30, 0x1e, 0x68, 0xaf, 0x22, 0xf3, 0x16, 0x25, 0xe2, 0x2a, 0x96, 0xee, 0x72, 0x70, 0xd1, 0x02, 0x91, 0x8b, 0x5e, 0x0a, 0x5b, 0x7e, 0xa6, 0xb6, 0x51, 0x05, 0xed, 0xed, 0x81, 0xc0, 0x3e, 0x65, 0x25, 0x95, 0x29, 0x0e, 0x4f, 0xc1, 0x8a, 0x2d, 0x98, 0x59, 0x38, 0xb5, 0x8b, 0x41, 0xf5, 0xd2, 0x68, 0x05, 0x2c, 0xcd, 0x5a, 0x17, 0x02, 0x68, 0x5e, 0x28, 0xab, 0xc8, 0x87, 0x78, 0x50, 0xbe},
}};
std::array<std::array<uint8_t, 24 * NUM_INPUTS>, NUM_HASHERS> enc_inputs_192 = {{
    {0x28, 0x38, 0xbf, 0x5c, 0xda, 0x11, 0x24, 0x83, 0x28, 0x4d, 0x70, 0x59, 0xe5, 0x96, 0x9e, 0x58, 0x23, 0xde, 0x15, 0x91, 0xd3, 0xd8, 0xc3, 0x83, 0xc6, 0x9d, 0x49, 0xdb, 0x5f, 0xfe, 0x3d, 0x97, 0x62, 0xb5, 0x9b, 0x8c, 0x78, 0xde, 0xa3, 0xf9, 0x97, 0xf8, 0xdf, 0x52, 0xf1, 0x54, 0xe9, 0x44, 0xbe, 0xe4, 0x1b, 0xad, 0x8f, 0x5b, 0x77, 0x9b, 0x34, 0xa8, 0x41, 0xcb, 0x72, 0x97, 0x58, 0x25, 0x94, 0xed, 0x2d, 0x63, 0xaa, 0xdf, 0x55, 0x32, 0x72, 0xbb, 0xd4, 0x08, 0x33, 0xba, 0xd5, 0x5f, 0x38, 0xb0, 0x25, 0xf5, 0xc2, 0x53, 0xb3, 0xb8, 0xe9, 0xbb, 0xf3, 0xe4, 0xb3, 0x9f, 0xa7, 0xd0, 0xbb, 0x0b, 0xc7, 0xc5, 0x05, 0xd6, 0x28, 0x12, 0x8b, 0xcb, 0x15, 0x3f, 0x9f, 0xd5, 0x79, 0xd6, 0xf7, 0x49, 0xd3, 0x92, 0x4a, 0xae, 0xd0, 0x41, 0xa6, 0xe8, 0x0c, 0x2e, 0xa2, 0x12, 0x46, 0xf4, 0x50, 0xe7, 0xd5, 0xb3, 0x05, 0xe1, 0xb6, 0xb2, 0x22, 0x67, 0xb2, 0x0d, 0x6d, 0x14, 0x79, 0x06, 0x5d, 0x19, 0x75, 0xd9, 0x70, 0x7e, 0xc7, 0x32, 0x8d, 0xce, 0x4f, 0x2f, 0x01, 0x45, 0x39, 0xbf, 0x78, 0xb4, 0xac, 0xc1, 0x4a, 0xd5, 0xbf, 0xe4, 0x55, 0x5d, 0xcf, 0x90, 0xa3, 0x00, 0x68, 0x59, 0xe2, 0x54, 0x63, 0x19, 0xac, 0xb5, 0x79, 0x51, 0xa0, 0x6b, 0xae, 0xfc, 0xcb, 0x27, 0x11, 0xf7},
    {0x50, 0x63, 0x9a, 0xc8, 0x9e, 0xf3, 0x81, 0x9a, 0x8e, 0x23, 0x2f, 0xd4, 0xc7, 0x7d, 0xa8, 0xcb, 0x9a, 0x67, 0xe9, 0x58, 0xed, 0xba, 0x7e, 0xe3, 0x42, 0xf6, 0xfb, 0x73, 0x18, 0xc5, 0x29, 0xc5, 0x10, 0x82, 0xa4, 0xb8, 0x73, 0x25, 0xb4, 0x14, 0xce, 0xc1, 0x1b, 0x95, 0xc6, 0x17, 0xaf, 0x22, 0x76, 0x5a, 0x78, 0x99, 0x74, 0x2c, 0x3a, 0x35, 0xf0, 0x3d, 0xf6, 0xcc, 0x2d, 0x1b, 0x6e, 0x8c, 0x1f, 0x71, 0xa1, 0xc8, 0x19, 0xd3, 0xc9, 0x8c, 0x44, 0x80, 0x52, 0x65, 0x2d, 0x96, 0xd5, 0x6a, 0x5f, 0xaa, 0x44, 0x4c, 0x51, 0xf7, 0x4c, 0x31, 0x8b, 0xea, 0xc6, 0x7a, 0xd3, 0xb8, 0x84, 0x71, 0xdc, 0x68, 0x78, 0x9f, 0x93, 0xf6, 0xfb, 0x5f, 0x97, 0xb9, 0x2a, 0x73, 0xa0, 0x96, 0xe7, 0x9f, 0xf9, 0xfa, 0xe7, 0x6f, 0xb2, 0xe0, 0x4f, 0x32, 0x29, 0xee, 0x4b, 0xca, 0xfa, 0x9c, 0xd1, 0x1c, 0x18, 0xa6, 0x89, 0x08, 0x41, 0x75, 0x22, 0x5b, 0xbb, 0xca, 0x72, 0x38, 0xd5, 0xaa, 0x41, 0x12, 0xda, 0x5a, 0x39, 0x97, 0xfd, 0x05, 0x04, 0x22, 0x6d, 0x6a, 0xd5, 0x8e, 0xc5, 0x71, 0xfb, 0x92, 0x2f, 0x05, 0x62, 0xcc, 0xa9, 0x8a, 0xde, 0xc7, 0x59, 0xcd, 0x05, 0x6d, 0x9e, 0xbd, 0x11, 0x36, 0x29, 0x8d, 0x4a, 0x8d, 0xbf, 0x71, 0x9d, 0x58, 0x06, 0xa1, 0xc6, 0x59, 0xb8, 0x2e, 0x91, 0xdd},
    {0xae, 0xe6, 0x5d, 0x35, 0x0b, 0x54, 0xae, 0x26, 0xc2, 0x3c, 0xd8, 0xb1, 0x68, 0x58, 0xd6, 0x27, 0x5f, 0x95, 0xaa, 0xa8, 0xe5, 0xa1, 0x8d, 0x5a, 0x57, 0x00, 0xcd, 0x15, 0x78, 0x92, 0xc9, 0x8b, 0xbb, 0xc1, 0x8e, 0x6d, 0x2e, 0xa3, 0x50, 0x6d, 0xb0, 0xc4, 0x53, 0x32, 0x9f, 0x5e, 0x64, 0x88, 0x41, 0x9a, 0x1a, 0x21, 0x46, 0x65, 0xfc, 0x86, 0xf1, 0x74, 0x5a, 0xbc, 0x17, 0xdb, 0xff, 0x6c, 0x83, 0xea, 0x50, 0x33, 0xf2, 0x56, 0x15, 0x82, 0x22, 0x54, 0xf6, 0xbc, 0x82, 0xf4, 0x01, 0x4c, 0x26, 0x9f, 0x07, 0x91, 0xeb, 0xef, 0x08, 0x22, 0x83, 0x5b, 0x2e, 0xb0, 0x2c, 0xee, 0x28, 0x62, 0xbf, 0xd7, 0x18, 0x71, 0xef, 0x12, 0xd8, 0x86, 0xde, 0xa6, 0x04, 0xee, 0x05, 0xd0, 0x94, 0xe1, 0x32, 0x0f, 0x3a, 0x72, 0xe1, 0xac, 0xad, 0x5b, 0x05, 0x2b, 0xd0, 0xfb, 0x66, 0x4f, 0x85, 0x66, 0xaf, 0x2e, 0x35, 0x45, 0x66, 0x7b, 0xa0, 0x71, 0x36, 0x14, 0x70, 0xad, 0x24, 0xa3, 0xa9, 0xf8, 0xb5, 0xfd, 0xa7, 0xd7, 0x26, 0x5e, 0x54, 0xdd, 0x1a, 0xd6, 0x39, 0xed, 0x0c, 0x77, 0x53, 0xa5, 0xe7, 0xb9, 0x92, 0x00, 0xc1, 0x90, 0xf5, 0x13, 0xe2, 0xaa, 0xea, 0x08, 0x31, 0x90, 0x63, 0x7f, 0xd9, 0xfd, 0xf8, 0x99, 0x39, 0x82, 0x6e, 0x28, 0x6d, 0x32, 0x8a, 0x68, 0x86, 0x64, 0xf6, 0x9e},
    {0x3f, 0xaf, 0xf5, 0x11, 0xd7, 0x22, 0x08, 0x2d, 0x76, 0x8a, 0xdd, 0x70, 0xe5, 0x4e, 0x5a, 0x34, 0xd1, 0xc5, 0xc4, 0x9b, 0xa1, 0xb0, 0x8d, 0x77, 0xac, 0xff, 0x6c, 0x7a, 0xde, 0xf4, 0x21, 0xcc, 0xe7, 0x50, 0x2b, 0x3f, 0xb1, 0xe9, 0xb5, 0x67, 0xa9, 0x2a, 0x39, 0xdb, 0xb3, 0x7e, 0x5c, 0x9a, 0x4d, 0xa6, 0x24, 0xcd, 0xaa, 0xd0, 0xe5, 0x8b, 0x8b, 0xe9, 0x52, 0x34, 0x2a, 0xd4, 0xee, 0x18, 0xcb, 0x4e, 0xad, 0xa5, 0xa4, 0x41, 0xb1, 0xb6, 0xc0, 0x78, 0x3c, 0xba, 0x3c, 0xae, 0x95, 0x3a, 0xdb, 0x59, 0x80, 0x7e, 0xdb, 0xe3, 0x5f, 0xa9, 0x54, 0x31, 0x5d, 0x82, 0xc2, 0x13, 0x25, 0x0a, 0x8c, 0x86, 0x66, 0x67, 0xf1, 0xce, 0x68, 0x20, 0x84, 0x53, 0x40, 0x41, 0xeb, 0xdc, 0xa1, 0xe0, 0x4e, 0xd5, 0x5c, 0x83, 0x7d, 0x55, 0x2e, 0x02, 0x6c, 0x6e, 0xee, 0x33, 0x47, 0xa2, 0x31, 0x84, 0xb1, 0x2a, 0x97, 0x6c, 0x15, 0x94, 0xb2, 0xba, 0x8d, 0x7c, 0x2f, 0xec, 0x92, 0x4e, 0x29, 0xc6, 0x78, 0xaa, 0xf9, 0xa9, 0x6f, 0x39, 0x11, 0x3c, 0xae, 0xf0, 0x37, 0x5e, 0x72, 0xef, 0x43, 0x80, 0xfd, 0xe8, 0xc6, 0xb6, 0xa7, 0xa0, 0xfd, 0x04, 0x94, 0x9f, 0xb2, 0x2d, 0x76, 0x05, 0x48, 0x49, 0xab, 0x86, 0xfe, 0x33, 0x77, 0x47, 0x4d, 0x2c, 0x2c, 0xc3, 0xb6, 0xe3, 0x59, 0x35, 0xf1, 0x46},
}};
std::array<std::array<uint8_t, 32 * NUM_INPUTS>, NUM_HASHERS> enc_inputs_256 = {{
    {0xad, 0x94, 0x45, 0x2c, 0x9d, 0xc1, 0xf5, 0x6e, 0x60, 0x75, 0xed, 0x5b, 0x1a, 0xb1, 0x3e, 0xd6, 0xec, 0xda, 0x20, 0x9f, 0x3c, 0x2b, 0x55, 0x7c, 0x78, 0x6d, 0x11, 0x43, 0xf2, 0x5d, 0x2a, 0xcc, 0xba, 0x5d, 0xf5, 0x5e, 0x1b, 0x2d, 0xbf, 0xaa, 0xcc, 0x6f, 0x67, 0x66, 0x9d, 0x7e, 0x24, 0x33, 0xe0, 0x81, 0x65, 0x85, 0x72, 0xdd, 0xe6, 0x88, 0xa5, 0x00, 0x45, 0x6b, 0xe3, 0x00, 0x81, 0x95, 0x56, 0xba, 0x21, 0x10, 0x77, 0x2f, 0x5b, 0xf8, 0x91, 0xc6, 0x15, 0x9c, 0x24, 0x71, 0x0c, 0x4c, 0xe6, 0x9e, 0x61, 0x81, 0x91, 0xe5, 0x07, 0x60, 0x2f, 0xe7, 0x84, 0xd8, 0x36, 0x82, 0x71, 0xd9, 0xc9, 0x27, 0xe9, 0x9e, 0x1f, 0x17, 0xae, 0xc2, 0xca, 0x2c, 0x0b, 0xf4, 0x40, 0x27, 0x65, 0x09, 0xe8, 0xa0, 0x66, 0xc1, 0x44, 0xa8, 0xb7, 0x6c, 0xd7, 0xe0, 0x84, 0xa0, 0x8d, 0x10, 0xfb, 0xc0, 0xb6, 0x92, 0x9b, 0xfc, 0xeb, 0x68, 0xbe, 0x13, 0x68, 0x7f, 0x42, 0xf4, 0x0f, 0x20, 0xb5, 0x47, 0xeb, 0x99, 0xa7, 0x18, 0xfd, 0xa4, 0xf2, 0x33, 0xe1, 0x72, 0x6f, 0xc3, 0x86, 0x61, 0xb2, 0x8a, 0x11, 0x81, 0xf3, 0xe2, 0xd2, 0x09, 0x86, 0x4c, 0xef, 0xef, 0x45, 0x18, 0x16, 0x80, 0x89, 0x32, 0x47, 0x27, 0xec, 0xd4, 0x80, 0x93, 0xcb, 0x06, 0xc4, 0x36, 0x9f, 0x31, 0x7f, 0xff, 0x1f, 0x80, 0x97, 0x0d, 0x18, 0x56, 0x04, 0xcd, 0x4e, 0x3f, 0xa9, 0xb8, 0x11, 0x87, 0x9b, 0x9a, 0x34, 0x3d, 0x78, 0xb9, 0x06, 0xde, 0xf5, 0x2f, 0xed, 0x2e, 0x94, 0x1c, 0xc5, 0x1b, 0x7c, 0x0b, 0x06, 0x16, 0xb4, 0x7f, 0xe7, 0x86, 0x01, 0xc5, 0xb2, 0x1b, 0xaf, 0x45, 0x43, 0x9d, 0x24, 0xe9, 0xcd, 0x66, 0xf6, 0x35, 0x39, 0x15, 0x3a, 0x41, 0x1f, 0x43, 0xa8, 0xc7, 0x29, 0x3c, 0x2e, 0xc3, 0xac, 0xe6},
    {0x50, 0xbc, 0x89, 0xfe, 0xee, 0xef, 0x2c, 0xdf, 0x54, 0x6d, 0x23, 0x54, 0x51, 0x54, 0x5b, 0x31, 0x1f, 0x75, 0x3b, 0xdc, 0xa9, 0x7f, 0xc8, 0x8e, 0x3e, 0x65, 0x26, 0x27, 0x45, 0xd2, 0xea, 0x51, 0x0c, 0x5a, 0x73, 0x9b, 0x58, 0x3f, 0x59, 0xfa, 0x50, 0x16, 0xf7, 0x05, 0x5c, 0x36, 0x4e, 0x97, 0xf2, 0x29, 0x6b, 0xe6, 0x82, 0xbb, 0x69, 0xde, 0x12, 0xe1, 0x34, 0x32, 0x3b, 0x7f, 0x07, 0x91, 0xe9, 0x95, 0xe1, 0xac, 0x1a, 0x31, 0x6e, 0x1e, 0x13, 0x7d, 0xbe, 0xdf, 0x59, 0x02, 0x34, 0xf0, 0x49, 0x16, 0x80, 0x3d, 0x99, 0x75, 0xa2, 0x04, 0xd6, 0xf6, 0xdb, 0xc2, 0xab, 0xdb, 0xa8, 0x2c, 0x57, 0x56, 0xdb, 0xa1, 0xba, 0x1a, 0xce, 0x77, 0xbb, 0x10, 0x04, 0xfe, 0xcf, 0x41, 0x39, 0xe8, 0xa9, 0x52, 0x32, 0x2a, 0xc8, 0x9e, 0x11, 0x8c, 0xc7, 0x7e, 0x0e, 0xd6, 0xc2, 0xf1, 0x3c, 0x19, 0x43, 0x58, 0xb8, 0x62, 0xe0, 0x36, 0xff, 0x67, 0x76, 0x31, 0x1b, 0xf6, 0xe6, 0x4a, 0x02, 0xeb, 0x22, 0x08, 0x8f, 0x5c, 0x6e, 0xb6, 0xb0, 0x19, 0x1e, 0xe6, 0x7c, 0x8d, 0x92, 0xcf, 0x00, 0x08, 0xe2, 0xa0, 0xa8, 0x83, 0x27, 0xd6, 0x59, 0x09, 0x7c, 0x3e, 0x08, 0xac, 0xdf, 0xa5, 0x35, 0x18, 0xfd, 0x89, 0x0a, 0x78, 0xbc, 0x26, 0xfa, 0xfe, 0x73, 0xfc, 0xb5, 0xc3, 0x67, 0xe0, 0x8a, 0x2e, 0x9c, 0x05, 0x52, 0x30, 0xca, 0x81, 0x9e, 0x98, 0x25, 0xe5, 0x9e, 0x8b, 0xfe, 0xcb, 0x4f, 0x6e, 0xce, 0x72, 0xec, 0x71, 0x04, 0x2b, 0xc6, 0x1a, 0x0f, 0x3c, 0x45, 0xc8, 0x43, 0x9c, 0x14, 0x25, 0x46, 0x1c, 0xf4, 0xc4, 0x18, 0x8e, 0x77, 0xf1, 0xaa, 0xb9, 0x8b, 0xc8, 0x76, 0x45, 0xc1, 0x01, 0xb9, 0xbf, 0x91, 0xac, 0xd0, 0xf4, 0x05, 0xa2, 0xe6, 0xb1, 0x79, 0x67, 0x42, 0x51, 0x3b, 0x46},
    {0xb5, 0xdd, 0x44, 0x42, 0xaa, 0x02, 0xa9, 0xa2, 0x0e, 0x93, 0xf8, 0xdc, 0x2a, 0x86, 0xa3, 0x42, 0x35, 0x94, 0x71, 0xae, 0x8a, 0xc9, 0x3d, 0xce, 0x0e, 0x5c, 0x90, 0xed, 0xa8, 0x7b, 0xd8, 0x96, 0xb0, 0xfc, 0x6e, 0x1b, 0x7d, 0xf0, 0x60, 0x0b, 0xae, 0xf1, 0xa3, 0xf4, 0x5a, 0xf3, 0x3e, 0x1a, 0xc1, 0x18, 0x48, 0x15, 0x92, 0x77, 0xa5, 0x59, 0x11, 0xdd, 0xa2, 0x9a, 0x09, 0x3d, 0x77, 0x4e, 0xc4, 0xe6, 0x51, 0xb2, 0x3f, 0x42, 0x0b, 0x0d, 0xf0, 0x85, 0xa9, 0xc5, 0xb1, 0xff, 0x6e, 0x96, 0x12, 0xc5, 0x72, 0x27, 0x17, 0xaf, 0x92, 0xb1, 0x94, 0x23, 0xbc, 0x67, 0x50, 0x3f, 0xfa, 0xf6, 0x39, 0x82, 0x39, 0xa2, 0x8d, 0x2f, 0xc4, 0x9c, 0x6e, 0xbd, 0xac, 0xa2, 0x89, 0xba, 0x88, 0x0f, 0x9a, 0x67, 0x69, 0x5a, 0xac, 0xa1, 0x5a, 0x50, 0x9e, 0xfa, 0x81, 0xc0, 0x72, 0x3b, 0xd3, 0xaf, 0x6e, 0x66, 0x92, 0xe0, 0xa4, 0x2d, 0xba, 0x3c, 0x3a, 0x30, 0xd9, 0x27, 0x6d, 0x51, 0x3b, 0x1a, 0xb1, 0xb1, 0x6c, 0x9a, 0x1c, 0x79, 0xd0, 0x93, 0xed, 0xfb, 0xc9, 0xd6, 0x3f, 0xb9, 0xfb, 0xf6, 0x83, 0xb5, 0xb2, 0x51, 0x82, 0xfd, 0x28, 0x44, 0x7f, 0xbb, 0xe1, 0xee, 0xbb, 0xe3, 0x22, 0x72, 0x33, 0xfe, 0x01, 0x01, 0x3b, 0xce, 0x65, 0x7b, 0x1f, 0x80, 0x98, 0x70, 0x76, 0xbf, 0xea, 0x5b, 0x14, 0xc9, 0xb7, 0x47, 0xc0, 0x0b, 0x8a, 0xb7, 0xe9, 0xcc, 0x9a, 0x46, 0xb5, 0x4e, 0x7d, 0xe5, 0x71, 0x07, 0x57, 0x81, 0x27, 0xde, 0x0d, 0x19, 0x13, 0xd4, 0x0e, 0xca, 0xc6, 0xcc, 0x41, 0x0a, 0x24, 0x29, 0x4c, 0x78, 0xf6, 0xfe, 0x81, 0x9d, 0x6c, 0xe2, 0x05, 0x47, 0xc9, 0x83, 0xb2, 0xca, 0x1f, 0x40, 0xd6, 0x51, 0xad, 0x8f, 0x50, 0x9a, 0xc4, 0x9e, 0x9d, 0xf6, 0xaa, 0x6f, 0x16, 0x3c},
    {0xe3, 0xc1, 0x10, 0xa1, 0x60, 0xea, 0xc2, 0x91, 0x44, 0xdf, 0x89, 0xbe, 0x66, 0xec, 0x39, 0x59, 0x8c, 0xb1, 0x3e, 0xa2, 0xee, 0x6d, 0x84, 0xf7, 0x9d, 0xf9, 0x50, 0xf1, 0xea, 0x0a, 0xe4, 0x38, 0x57, 0x20, 0x55, 0x42, 0xee, 0x94, 0xcb, 0x49, 0xe4, 0x48, 0x88, 0x50, 0xad, 0xf3, 0x15, 0xe4, 0xaf, 0x03, 0x70, 0x06, 0x1e, 0xa1, 0xfb, 0x5b, 0xa5, 0xd2, 0xa3, 0xa5, 0x67, 0x6b, 0x54, 0xa7, 0x8c, 0x89, 0x43, 0x05, 0xf6, 0x12, 0x1b, 0xd8, 0xfa, 0xc4, 0xbd, 0x1a, 0x9c, 0x02, 0x20, 0x7b, 0x70, 0x0e, 0x42, 0x39, 0xcb, 0xe3, 0x53, 0x0d, 0x4a, 0xb2, 0x6f, 0x74, 0x27, 0x33, 0x49, 0x08, 0x64, 0x49, 0xa0, 0x52, 0xe2, 0x7a, 0xfd, 0xb1, 0xda, 0xce, 0x52, 0xa7, 0xb5, 0xe6, 0x9a, 0x0e, 0xf3, 0xb9, 0x4b, 0x54, 0x35, 0x21, 0x66, 0x82, 0x21, 0x8f, 0x95, 0x59, 0x74, 0x77, 0x1a, 0x55, 0x6d, 0x6a, 0xfb, 0xb4, 0xd7, 0xde, 0x42, 0x8b, 0x3e, 0xe6, 0x63, 0xcc, 0x7e, 0x41, 0xc5, 0x16, 0xc8, 0xbd, 0xcd, 0x13, 0x49, 0x44, 0xd3, 0x98, 0xf2, 0x1b, 0x35, 0xa9, 0x61, 0x8f, 0x80, 0xbc, 0xa9, 0x0e, 0x5c, 0xaf, 0x6f, 0x9e, 0x19, 0xa4, 0x94, 0x83, 0xe0, 0xd8, 0xa3, 0x66, 0x8f, 0xa0, 0xa0, 0x2e, 0x4e, 0xe9, 0x26, 0x09, 0x8b, 0x5d, 0xae, 0x9f, 0x5b, 0xb9, 0x58, 0xf1, 0x2c, 0x5e, 0x22, 0xbd, 0x56, 0xb6, 0x97, 0x25, 0x40, 0x82, 0x10, 0xf5, 0x19, 0xb8, 0x0f, 0x78, 0xb0, 0x97, 0xa3, 0xa1, 0x60, 0x66, 0xc8, 0xd1, 0x29, 0x23, 0x39, 0x1f, 0x75, 0xa4, 0xf7, 0xb1, 0x36, 0x75, 0x68, 0x32, 0x2b, 0x70, 0x88, 0xf3, 0x61, 0xee, 0x2b, 0x60, 0x6b, 0x2e, 0xc4, 0xdb, 0xaa, 0x69, 0x46, 0x22, 0xf1, 0xbe, 0x19, 0x9f, 0x4d, 0xc9, 0xac, 0x65, 0xbc, 0xed, 0x0e, 0xc6, 0xfe, 0xb2},
}};

std::array<std::array<uint8_t, 8>, NUM_HASHERS> expected_enc_outputs_64 = {{
    {0x17, 0x93, 0xe3, 0xe5, 0x28, 0x65, 0x19, 0xb1},
    {0xf2, 0x7f, 0x8a, 0xd7, 0x79, 0x12, 0x69, 0x42},
    {0xe5, 0xdc, 0x11, 0x63, 0x66, 0x36, 0xc2, 0x94},
    {0x0f, 0x89, 0xf5, 0xa3, 0x6f, 0xb4, 0xc4, 0x9d},
}};
std::array<std::array<uint8_t, 16>, NUM_HASHERS> expected_enc_outputs_128 = {{
    {0x62, 0x16, 0x76, 0x3f, 0xe3, 0xc1, 0xbb, 0xab, 0xf2, 0xcf, 0x34, 0xcd, 0xe9, 0xaf, 0x4a, 0x52},
    {0x20, 0x6a, 0xd8, 0x65, 0xe1, 0x33, 0xc2, 0x68, 0xb0, 0x4f, 0xc3, 0x23, 0x8e, 0x5e, 0x6d, 0x64},
    {0xa1, 0x3b, 0x6f, 0x30, 0x08, 0x7c, 0x7f, 0x88, 0x8a, 0x61, 0x5e, 0x3a, 0xb9, 0x6f, 0x37, 0x36},
    {0x56, 0x36, 0xf1, 0xc2, 0x38, 0x6e, 0xd8, 0xa8, 0x01, 0xc9, 0x79, 0x70, 0x11, 0xba, 0x0d, 0xdf},
}};
std::array<std::array<uint8_t, 24>, NUM_HASHERS> expected_enc_outputs_192 = {{
    {0x81, 0x3f, 0xee, 0x13, 0x38, 0xca, 0xca, 0xed, 0x4b, 0x62, 0x2f, 0x2e, 0x04, 0xd5, 0xd8, 0x14, 0x5c, 0xce, 0xc9, 0xce, 0xe9, 0xb7, 0x5c, 0x47},
    {0x46, 0xdb, 0x56, 0x25, 0x96, 0x7f, 0xcd, 0x2b, 0xff, 0x8f, 0x06, 0xab, 0x37, 0xf7, 0x44, 0x2d, 0xa3, 0x0b, 0xbf, 0x66, 0x98, 0x35, 0xed, 0x22},
    {0x15, 0x13, 0xf6, 0xa7, 0xc1, 0xd0, 0xee, 0xfb, 0x50, 0x4e, 0xcd, 0x25, 0xd0, 0x3c, 0xdd, 0x3a, 0xdf, 0xa8, 0xe3, 0x15, 0x9c, 0xbd, 0xe3, 0xce},
    {0x16, 0xc9, 0xea, 0x28, 0x4a, 0xea, 0xed, 0xcd, 0x18, 0x00, 0x6b, 0x62, 0xe4, 0x8d, 0x46, 0xbf, 0x53, 0xdb, 0xe9, 0x2e, 0x1e, 0x89, 0xb1, 0xbd},
}};
std::array<std::array<uint8_t, 32>, NUM_HASHERS> expected_enc_outputs_256 = {{
    {0x66, 0x84, 0x84, 0xb7, 0x04, 0x35, 0x33, 0x74, 0xb5, 0x28, 0xd6, 0xe9, 0x1b, 0xab, 0x06, 0x79, 0xfa, 0x2d, 0xe7, 0x6b, 0x26, 0x55, 0x34, 0x99, 0x4b, 0x9d, 0x59, 0xb7, 0xb2, 0x27, 0x41, 0xe1},
    {0x5f, 0xc9, 0xac, 0xad, 0x81, 0xed, 0x6e, 0xe7, 0xa5, 0xed, 0xa6, 0x40, 0x75, 0xcd, 0xdd, 0xf6, 0x45, 0x03, 0x56, 0xd9, 0xbe, 0x78, 0x16, 0x61, 0xdb, 0x67, 0x88, 0xf6, 0x59, 0x14, 0x57, 0x46},
    {0x2b, 0x86, 0x5d, 0x5c, 0xa8, 0x9a, 0xc2, 0xd4, 0xaf, 0x94, 0xc1, 0xeb, 0x9e, 0x54, 0xd0, 0x33, 0x1f, 0x55, 0x69, 0x00, 0x45, 0xf2, 0x63, 0x2e, 0x5e, 0xa1, 0x77, 0xb6, 0x26, 0x8f, 0xcf, 0xdc},
    {0x0d, 0x21, 0xaf, 0x49, 0x93, 0x27, 0xd4, 0xdd, 0x64, 0x5c, 0xba, 0x10, 0x3d, 0x1b, 0xe2, 0xb8, 0x16, 0x0c, 0x27, 0xf1, 0xfa, 0x62, 0xaa, 0x7e, 0x85, 0x95, 0xf5, 0xaa, 0x4b, 0x81, 0x29, 0x73},
}};

std::array<std::array<uint8_t, 16>, NUM_HASHERS> expected_enc_outputs_64x128 = {{
    {0xa9, 0x7d, 0x1f, 0xe8, 0x58, 0x49, 0x66, 0x11, 0xab, 0xd8, 0x78, 0xb2, 0xb6, 0xcf, 0x89, 0x70},
    {0x5e, 0x86, 0x33, 0x41, 0xbd, 0x4d, 0x7f, 0x4b, 0x0a, 0x3d, 0xc8, 0x47, 0x0c, 0xd2, 0xea, 0xb3},
    {0xcb, 0x58, 0x1e, 0xbe, 0x74, 0xfa, 0xf3, 0xc4, 0x0c, 0xbf, 0xe5, 0xd9, 0xd1, 0xc3, 0x84, 0x16},
    {0xd4, 0x99, 0xe0, 0xd2, 0xc2, 0x24, 0xbb, 0xd7, 0x89, 0xcf, 0xdc, 0xa5, 0x4d, 0xf4, 0xb8, 0xf5},
}};
std::array<std::array<uint8_t, 24>, NUM_HASHERS> expected_enc_outputs_64x192 = {{
    {0xda, 0x3b, 0xe0, 0x7d, 0xb2, 0x68, 0x89, 0x0e, 0x37, 0xa1, 0x2c, 0x89, 0x7e, 0xbf, 0x03, 0x68, 0x8c, 0xb5, 0x57, 0xd1, 0xe7, 0xff, 0x31, 0xbd},
    {0x0c, 0x9e, 0xb0, 0xb4, 0x88, 0x59, 0x4e, 0x98, 0x73, 0x48, 0x64, 0xce, 0xf7, 0x13, 0x65, 0xcb, 0xd4, 0xf6, 0x93, 0xea, 0x62, 0x16, 0xed, 0x27},
    {0x2a, 0x80, 0x26, 0x5f, 0xbb, 0x9e, 0x6f, 0x66, 0xd3, 0xc3, 0x24, 0xa5, 0x72, 0x5b, 0xd5, 0xcb, 0x6d, 0x12, 0x17, 0x66, 0x2d, 0xd7, 0x04, 0x40},
    {0x8b, 0x7b, 0xc1, 0xf3, 0x07, 0x19, 0xd5, 0x59, 0x63, 0x25, 0xc7, 0x40, 0xd0, 0xcb, 0x0b, 0x08, 0xc8, 0x4c, 0xa1, 0x04, 0x0f, 0x04, 0x92, 0x99},
}};
std::array<std::array<uint8_t, 32>, NUM_HASHERS> expected_enc_outputs_64x256 = {{
    {0xf2, 0x4f, 0x03, 0xf7, 0xcf, 0x10, 0x01, 0xf1, 0xfa, 0x8d, 0x63, 0x3d, 0x4c, 0x8b, 0x02, 0x63, 0xb6, 0xa1, 0xdb, 0x25, 0x78, 0x82, 0xe1, 0x1a, 0xcf, 0x2c, 0x2a, 0xb4, 0xe7, 0x37, 0x6e, 0xf0},
    {0x53, 0x2e, 0xf2, 0x28, 0xd5, 0xc8, 0x45, 0xa7, 0x2d, 0x19, 0xd6, 0x35, 0x79, 0x40, 0x87, 0xb5, 0xe4, 0x6e, 0x36, 0xb4, 0xbb, 0x86, 0xf1, 0xa5, 0x02, 0x1a, 0x0f, 0x01, 0x23, 0xe6, 0x61, 0x8e},
    {0xe8, 0x4f, 0xdd, 0xb7, 0x24, 0x34, 0x18, 0x27, 0x88, 0x06, 0x1e, 0x90, 0x98, 0x58, 0xa6, 0x7c, 0xae, 0x3d, 0x30, 0x33, 0x9a, 0x14, 0x68, 0xa4, 0x98, 0xbf, 0x0d, 0x11, 0x8c, 0xc4, 0xd0, 0x7b},
    {0x6e, 0x2d, 0x85, 0x56, 0xdf, 0x46, 0x74, 0x63, 0x75, 0x43, 0x1f, 0x59, 0xa1, 0x11, 0xb8, 0x3b, 0x63, 0xac, 0xd0, 0x08, 0x94, 0x26, 0xdc, 0x7c, 0xdd, 0x6d, 0xcf, 0xa2, 0xa7, 0xab, 0x1e, 0x5a},
}};

// clang-format on

TEST_CASE("hasher gf64", "[universal hash]")
{
    hasher_gf64_key hash_key;
    hasher_gf64_state hash_state;

    const auto* key_poly_p = enc_keys_64.data();
    const auto* inputs_poly_p = enc_inputs_64.data();
    const auto* expected_outputs_poly_p = expected_enc_outputs_64.data();

    const size_t OFFSET = 8;

    for (size_t i = 0; i < NUM_HASHERS; ++i)
    {
        hash_key.init(poly64::load(&key_poly_p[i]));
        hash_state.init(NUM_INPUTS);
        for (size_t j = 0; j < NUM_INPUTS; ++j)
        {
            hash_state.update(&hash_key, poly64::load(&inputs_poly_p[i][j * OFFSET]));
        }
        poly64 hash = hash_state.finalize();
        poly64 expected_hash = poly64::load(&expected_outputs_poly_p[i]);
        REQUIRE_POLYVEC_EQ(hash, expected_hash);
    }
}

TEMPLATE_TEST_CASE("hasher gfsecpar", "[universal hash]", secpar128_t, secpar192_t, secpar256_t)
{
    constexpr auto S = TestType::value;
    hasher_gfsecpar_key<S> hash_key;
    hasher_gfsecpar_state<S> hash_state;

    auto [key_poly_p, inputs_poly_p, expected_outputs_poly_p] = [] -> auto
    {
        if constexpr (S == secpar::s128)
        {
            return std::make_tuple(enc_keys_128.data(), enc_inputs_128.data(),
                                   expected_enc_outputs_128.data());
        }
        else if constexpr (S == secpar::s192)
        {
            return std::make_tuple(enc_keys_192.data(), enc_inputs_192.data(),
                                   expected_enc_outputs_192.data());
        }
        else if constexpr (S == secpar::s256)
        {
            return std::make_tuple(enc_keys_256.data(), enc_inputs_256.data(),
                                   expected_enc_outputs_256.data());
        }
    }();

    const size_t OFFSET = secpar_to_bytes(S);

    for (size_t i = 0; i < NUM_HASHERS; ++i)
    {
        hash_key.init(poly_secpar<S>::load(&key_poly_p[i]));
        hash_state.init(NUM_INPUTS);
        for (size_t j = 0; j < NUM_INPUTS; ++j)
        {
            hash_state.update(&hash_key, poly_secpar<S>::load(&inputs_poly_p[i][j * OFFSET]));
        }
        poly_secpar<S> hash = hash_state.finalize();
        poly_secpar<S> expected_hash = poly_secpar<S>::load(&expected_outputs_poly_p[i]);
        REQUIRE_POLYVEC_EQ(hash, expected_hash);
    }
}

TEMPLATE_TEST_CASE("hasher gfsecpar_64", "[universal hash]", secpar128_t, secpar192_t, secpar256_t)
{
    constexpr auto S = TestType::value;
    hasher_gfsecpar_64_key hash_key;
    hasher_gfsecpar_64_state<S> hash_state;

    const auto* key_poly_p = enc_keys_64.data();
    auto [inputs_poly_p, expected_outputs_poly_p] = [] -> auto
    {
        if constexpr (S == secpar::s128)
        {
            return std::make_tuple(enc_inputs_128.data(), expected_enc_outputs_64x128.data());
        }
        else if constexpr (S == secpar::s192)
        {
            return std::make_tuple(enc_inputs_192.data(), expected_enc_outputs_64x192.data());
        }
        else if constexpr (S == secpar::s256)
        {
            return std::make_tuple(enc_inputs_256.data(), expected_enc_outputs_64x256.data());
        }
    }();

    const size_t OFFSET = secpar_to_bytes(S);

    for (size_t i = 0; i < NUM_HASHERS; ++i)
    {
        hash_key.init(poly64::load(&key_poly_p[i]));
        hash_state.init(NUM_INPUTS);
        for (size_t j = 0; j < NUM_INPUTS; ++j)
        {
            hash_state.update(&hash_key, poly_secpar<S>::load(&inputs_poly_p[i][j * OFFSET]));
        }
        poly_secpar<S> hash = hash_state.finalize();
        poly_secpar<S> expected_hash = poly_secpar<S>::load(&expected_outputs_poly_p[i]);
        REQUIRE_POLYVEC_EQ(hash, expected_hash);
    }
}
