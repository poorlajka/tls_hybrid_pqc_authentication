#include "test_aes_tvs.hpp"

// Test vectors taken from
// https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/AES_Core_All.pdf

// clang-format off

constexpr std::array<std::array<uint8_t, 16>, 5> aes_tvs<128>::AFTER_ADD_ROUND_KEY = {{
    {0x40, 0xBF, 0xAB, 0xF4, 0x06, 0xEE, 0x4D, 0x30, 0x42, 0xCA, 0x6B, 0x99, 0x7A, 0x5C, 0x58, 0x16},
    {0xF2, 0x65, 0xE8, 0xD5, 0x1F, 0xD2, 0x39, 0x7B, 0xC3, 0xB9, 0x97, 0x6D, 0x90, 0x76, 0x50, 0x5C},
    {0xFD, 0xF3, 0x7C, 0xDB, 0x4B, 0x0C, 0x8C, 0x1B, 0xF7, 0xFC, 0xD8, 0xE9, 0x4A, 0xA9, 0xBB, 0xF8},
    {0xAC, 0xD1, 0xEC, 0x9C, 0xA2, 0x42, 0xE2, 0xC3, 0x1F, 0x69, 0x0F, 0x7A, 0xB7, 0x04, 0xB9, 0x0F},
    {0xA2, 0x61, 0x6E, 0x5F, 0x44, 0xA5, 0x4D, 0x39, 0xC0, 0x29, 0xE2, 0x00, 0x92, 0xB7, 0x64, 0xE9},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<128>::AFTER_SBOX_INV = {{
    {0x1d, 0x57, 0x4a, 0x68, 0x7b, 0x1e, 0x25, 0x2c, 0x37, 0x53, 0xdf, 0x14, 0xd0, 0x51, 0x18, 0x60},
    {0x38, 0xa6, 0x08, 0xdb, 0xb2, 0xae, 0x35, 0x06, 0xa3, 0x8e, 0x72, 0x93, 0xde, 0xba, 0xed, 0x51},
    {0x1a, 0x34, 0xa1, 0xd5, 0x13, 0xb0, 0xf7, 0xcc, 0x8c, 0xcd, 0x94, 0x4e, 0xab, 0xc8, 0x3d, 0xdd},
    {0xce, 0x07, 0x5d, 0xf9, 0x2e, 0x37, 0xd6, 0xa3, 0xb2, 0x47, 0xc7, 0xd0, 0x71, 0xcb, 0x8e, 0xc7},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<128>::AFTER_SBOX = {{
    {0x09, 0x08, 0x62, 0xBF, 0x6F, 0x28, 0xE3, 0x04, 0x2C, 0x74, 0x7F, 0xEE, 0xDA, 0x4A, 0x6A, 0x47},
    {0x89, 0x4D, 0x9B, 0x03, 0xC0, 0xB5, 0x12, 0x21, 0x2E, 0x56, 0x88, 0x3C, 0x60, 0x38, 0x53, 0x4A},
    {0x54, 0x0D, 0x10, 0xB9, 0xB3, 0xFE, 0x64, 0xAF, 0x68, 0xB0, 0x61, 0x1E, 0xD6, 0xD3, 0xEA, 0x41},
    {0x91, 0x3E, 0xCE, 0xDE, 0x3A, 0x2C, 0x98, 0x2E, 0xC0, 0xF9, 0x76, 0xDA, 0xA9, 0xF2, 0x56, 0x76},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<128>::AFTER_SHIFT_ROWS = {{
    {0x09, 0x28, 0x7F, 0x47, 0x6F, 0x74, 0x6A, 0xBF, 0x2C, 0x4A, 0x62, 0x04, 0xDA, 0x08, 0xE3, 0xEE},
    {0x89, 0xB5, 0x88, 0x4A, 0xC0, 0x56, 0x53, 0x03, 0x2E, 0x38, 0x9B, 0x21, 0x60, 0x4D, 0x12, 0x3C},
    {0x54, 0xFE, 0x61, 0x41, 0xB3, 0xB0, 0xEA, 0xB9, 0x68, 0xD3, 0x10, 0xAF, 0xD6, 0x0D, 0x64, 0x1E},
    {0x91, 0x2C, 0x76, 0x76, 0x3A, 0xF9, 0x56, 0xDE, 0xC0, 0xF2, 0xCE, 0x2E, 0xA9, 0x3E, 0x98, 0xDA},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<128>::AFTER_MIX_COLUMNS = {{
    {0x52, 0x9F, 0x16, 0xC2, 0x97, 0x86, 0x15, 0xCA, 0xE0, 0x1A, 0xAE, 0x54, 0xBA, 0x1A, 0x26, 0x59},
    {0x0F, 0x31, 0xE9, 0x29, 0x31, 0x9A, 0x35, 0x58, 0xAE, 0xC9, 0x58, 0x93, 0x39, 0xF0, 0x4D, 0x87},
    {0x91, 0x51, 0xAB, 0xE1, 0xE5, 0x54, 0x1C, 0xFD, 0x01, 0x4A, 0x71, 0x3E, 0xDA, 0x7E, 0x31, 0x34},
    {0x4D, 0x25, 0xCB, 0x1E, 0xEC, 0xF7, 0x16, 0x46, 0x76, 0x58, 0xC7, 0x3B, 0x49, 0xBC, 0xC9, 0xE9},
}};

constexpr std::array<std::array<uint8_t, 16>, 5> aes_tvs<192>::AFTER_ADD_ROUND_KEY = {{
    {0xE5, 0xB2, 0x0E, 0x15, 0xF4, 0x4E, 0xFB, 0xC4, 0x21, 0x2D, 0x8D, 0x3A, 0xF3, 0x03, 0x6E, 0xCF},
    {0x6D, 0x12, 0x23, 0xDF, 0x82, 0xDB, 0xC2, 0x54, 0x25, 0xFD, 0x7E, 0x03, 0xE8, 0xF0, 0x4A, 0x91},
    {0x36, 0xC8, 0xE6, 0x99, 0xFE, 0xC6, 0x36, 0xFB, 0xF9, 0x0C, 0x0A, 0x12, 0x6F, 0x50, 0x6B, 0x6E},
    {0x78, 0xF7, 0x71, 0x44, 0x8C, 0x86, 0xD3, 0x88, 0xD8, 0x1E, 0x9B, 0xE5, 0x4D, 0x80, 0x32, 0x7A},
    {0x86, 0x8D, 0x08, 0x64, 0xDD, 0xF7, 0x2E, 0x4D, 0xA1, 0x80, 0x56, 0x09, 0xFB, 0xAF, 0x86, 0xD6},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<192>::AFTER_SBOX_INV = {{
    {0x0e, 0x1f, 0xe5, 0x2b, 0x68, 0xe9, 0xa0, 0xda, 0x6e, 0x44, 0x02, 0x20, 0x34, 0xf6, 0x21, 0xe6},
    {0x93, 0xaa, 0xf1, 0x6b, 0x7f, 0xd5, 0x2f, 0x4c, 0x4d, 0x1a, 0x81, 0xf6, 0x08, 0x5b, 0xab, 0x6a},
    {0x66, 0xa9, 0xcf, 0x14, 0x41, 0xe4, 0x66, 0xa0, 0x9c, 0xb0, 0x29, 0xaa, 0x3b, 0xed, 0xdf, 0x21},
    {0xb6, 0x8c, 0xb7, 0x2d, 0xf7, 0xbe, 0x63, 0x9b, 0x94, 0xee, 0x88, 0x0e, 0x25, 0x83, 0x92, 0xd0},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<192>::AFTER_SBOX = {{
    {0xD9, 0x37, 0xAB, 0x59, 0xBF, 0x2F, 0x0F, 0x1C, 0xFD, 0xD8, 0x5D, 0x80, 0x0D, 0x7B, 0x9F, 0x8A},
    {0x3C, 0xC9, 0x26, 0x9E, 0x13, 0xB9, 0x25, 0x20, 0x3F, 0x54, 0xF3, 0x7B, 0x9B, 0x8C, 0xD6, 0x81},
    {0x05, 0xE8, 0x8E, 0xEE, 0xBB, 0xB4, 0x05, 0x0F, 0x99, 0xFE, 0x67, 0xC9, 0xA8, 0x53, 0x7F, 0x9F},
    {0xBC, 0x68, 0xA3, 0x1B, 0x64, 0x44, 0x66, 0xC4, 0x61, 0x72, 0x14, 0xD9, 0xE3, 0xCD, 0x23, 0xDA},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<192>::AFTER_SHIFT_ROWS = {{
    {0xD9, 0x2F, 0x5D, 0x8A, 0xBF, 0xD8, 0x9F, 0x59, 0xFD, 0x7B, 0xAB, 0x1C, 0x0D, 0x37, 0x0F, 0x80},
    {0x3C, 0xB9, 0xF3, 0x81, 0x13, 0x54, 0xD6, 0x9E, 0x3F, 0x8C, 0x26, 0x20, 0x9B, 0xC9, 0x25, 0x7B},
    {0x05, 0xB4, 0x67, 0x9F, 0xBB, 0xFE, 0x7F, 0xEE, 0x99, 0x53, 0x8E, 0x0F, 0xA8, 0xE8, 0x05, 0xC9},
    {0xBC, 0x44, 0x14, 0xDA, 0x64, 0x72, 0x23, 0x1B, 0x61, 0xCD, 0xA3, 0xC4, 0xE3, 0x68, 0x66, 0xD9},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<192>::AFTER_MIX_COLUMNS = {{
    {0x0F, 0xEA, 0xC9, 0x0D, 0xD0, 0xF7, 0xA9, 0x2F, 0xDB, 0xF1, 0xEF, 0xF4, 0xCC, 0xF2, 0xBF, 0x34},
    {0xDA, 0xDA, 0xE0, 0x17, 0x92, 0x44, 0x49, 0x90, 0xF7, 0x76, 0x9F, 0xAB, 0x33, 0x06, 0x95, 0xAC},
    {0x35, 0x40, 0xC5, 0xF9, 0xE5, 0x33, 0x92, 0x90, 0x5D, 0xB9, 0xDC, 0x73, 0xA4, 0xA5, 0x0A, 0x87},
    {0x61, 0xD2, 0xA5, 0x20, 0x66, 0xFE, 0x7D, 0xCB, 0xE9, 0xDA, 0xA6, 0x5E, 0xDA, 0x40, 0x37, 0x99},
}};

constexpr std::array<std::array<uint8_t, 16>, 5> aes_tvs<256>::AFTER_ADD_ROUND_KEY = {{
    {0x0B, 0xFC, 0x55, 0xF2, 0x3B, 0x8A, 0xEE, 0x28, 0xC2, 0x4E, 0xD0, 0xE1, 0xF6, 0xEE, 0x60, 0xAB},
    {0xD9, 0x10, 0x3F, 0xB0, 0xCC, 0x3F, 0xFE, 0x1C, 0xD7, 0xC6, 0xA2, 0x70, 0x96, 0xAD, 0x6E, 0x41},
    {0xD7, 0xB1, 0xFE, 0x1C, 0xA7, 0x0C, 0xCD, 0x8C, 0xF4, 0x26, 0x45, 0x8E, 0xB4, 0xFF, 0x38, 0xA6},
    {0xE7, 0xCF, 0xDC, 0xD0, 0xB2, 0xED, 0x8E, 0xFA, 0x3E, 0x68, 0xEC, 0xD1, 0x51, 0x9E, 0x54, 0x51},
    {0x06, 0x3C, 0xC2, 0x3D, 0xAA, 0x5E, 0x6B, 0xCB, 0x37, 0xF1, 0x9B, 0x52, 0xC5, 0x45, 0x95, 0x11},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<256>::AFTER_SBOX_INV = {{
    {0xc0, 0xcd, 0x24, 0x38, 0x6f, 0x95, 0x1e, 0xc1, 0x2f, 0xe9, 0x7a, 0x0d, 0x03, 0x1e, 0x16, 0x4a},
    {0x8b, 0x74, 0x19, 0x0c, 0x1b, 0x19, 0x41, 0xff, 0xea, 0xe4, 0x2e, 0x79, 0x84, 0xe7, 0x21, 0xfe},
    {0xea, 0xe0, 0x41, 0xff, 0x48, 0xb0, 0xfc, 0xf7, 0x68, 0xa8, 0x31, 0xb9, 0x11, 0x1c, 0xf2, 0x65},
    {0xad, 0xe6, 0x9d, 0x7a, 0x1f, 0x50, 0xb9, 0x7d, 0x59, 0xf4, 0x5d, 0x07, 0x5c, 0x89, 0x4c, 0x5c},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<256>::AFTER_SBOX = {{
    {0x2B, 0xB0, 0xFC, 0x89, 0xE2, 0x7E, 0x28, 0x34, 0x25, 0x2F, 0x70, 0xF8, 0x42, 0x28, 0xD0, 0x62},
    {0x35, 0xCA, 0x75, 0xE7, 0x4B, 0x75, 0xBB, 0x9C, 0x0E, 0xB4, 0x3A, 0x51, 0x90, 0x95, 0x9F, 0x83},
    {0x0E, 0xC8, 0xBB, 0x9C, 0x5C, 0xFE, 0xBD, 0x64, 0xBF, 0xF7, 0x6E, 0x19, 0x8D, 0x16, 0x07, 0x24},
    {0x94, 0x8A, 0x86, 0x70, 0x37, 0x55, 0x19, 0x2D, 0xB2, 0x45, 0xCE, 0x3E, 0xD1, 0x0B, 0x20, 0xD1},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<256>::AFTER_SHIFT_ROWS = {{
    {0x2B, 0x7E, 0x70, 0x62, 0xE2, 0x2F, 0xD0, 0x89, 0x25, 0x28, 0xFC, 0x34, 0x42, 0xB0, 0x28, 0xF8},
    {0x35, 0x75, 0x3A, 0x83, 0x4B, 0xB4, 0x9F, 0xE7, 0x0E, 0x95, 0x75, 0x9C, 0x90, 0xCA, 0xBB, 0x51},
    {0x0E, 0xFE, 0x6E, 0x24, 0x5C, 0xF7, 0x07, 0x9C, 0xBF, 0x16, 0xBB, 0x64, 0x8D, 0xC8, 0xBD, 0x19},
    {0x94, 0x55, 0xCE, 0xD1, 0x37, 0x45, 0x20, 0x70, 0xB2, 0x0B, 0x86, 0x2D, 0xD1, 0x8A, 0x19, 0x3E},
}};

constexpr std::array<std::array<uint8_t, 16>, 4> aes_tvs<256>::AFTER_MIX_COLUMNS = {{
    {0xC6, 0x25, 0x13, 0xB7, 0xF7, 0x5E, 0xF6, 0xCB, 0xFA, 0x5E, 0xB2, 0xD3, 0x9F, 0xB9, 0xB1, 0xB5},
    {0x4C, 0x12, 0xAA, 0x0D, 0x29, 0x65, 0xE8, 0x23, 0x51, 0x3C, 0xCE, 0xD1, 0x94, 0x98, 0xC4, 0x78},
    {0x4F, 0x7F, 0x40, 0xCA, 0x21, 0x3C, 0x1A, 0x37, 0x80, 0x21, 0x68, 0xBF, 0xE6, 0xC3, 0x0F, 0xCB},
    {0xD3, 0xA6, 0x2E, 0x85, 0xF1, 0xAD, 0xA2, 0xDC, 0xC9, 0x18, 0xD9, 0x1A, 0x1B, 0xCB, 0x2B, 0x87},
}};

// clang-format on
