#include <array>

#include "aes.hpp"
#include "prgs.hpp"
#include "test.hpp"

#include <catch2/catch_template_test_macros.hpp>
#include <catch2/catch_test_macros.hpp>

const size_t num_keys = 3;
const size_t num_ctr_blocks = 15;

// clang-format off

const std::array<std::array<uint8_t, 16>, num_keys> keys_128 = {{
    {0x9d, 0x79, 0xb1, 0xa3, 0x7f, 0x31, 0x80, 0x1c, 0xd1, 0x1a, 0x67, 0x06, 0xfb, 0x40, 0xd6, 0xbd},
    {0x57, 0x52, 0x68, 0x46, 0x90, 0x3b, 0xb1, 0x3e, 0xde, 0x56, 0x24, 0x39, 0xe9, 0xc1, 0xb8, 0x23},
    {0xa9, 0x60, 0x89, 0xbc, 0xa7, 0x1f, 0x3d, 0x1a, 0x6d, 0x2d, 0x3c, 0xad, 0xb3, 0x66, 0x9c, 0xbd},
}};
const std::array<std::array<uint8_t, 24>, num_keys> keys_192 = {{
    {0x50, 0xe1, 0x65, 0xe4, 0x34, 0x24, 0x9d, 0x8b, 0x82, 0x9f, 0x41, 0x16, 0x69, 0x84, 0x2a, 0x97, 0x99, 0x11, 0x03, 0x6c, 0xf3, 0xe8, 0x22, 0x08},
    {0x6e, 0xca, 0xa0, 0x07, 0x5a, 0x69, 0xfc, 0x17, 0x8b, 0xa8, 0xf8, 0x37, 0x18, 0xaa, 0x8f, 0x3b, 0xd1, 0xf6, 0x5e, 0x81, 0x44, 0xe6, 0x1d, 0x9a},
    {0xb3, 0x0f, 0xcb, 0x06, 0xa6, 0xc1, 0xad, 0x8f, 0x29, 0x06, 0xe7, 0x32, 0xb1, 0x0f, 0x4d, 0xb7, 0x89, 0xd3, 0x5e, 0xa6, 0x8c, 0x08, 0x8a, 0xb3},
}};
const std::array<std::array<uint8_t, 32>, num_keys> keys_256 = {{
    {0xf6, 0x48, 0x81, 0x8b, 0xa4, 0xa6, 0x65, 0x6b, 0xe0, 0xcb, 0x6e, 0x38, 0x2a, 0x5d, 0xff, 0x72, 0xac, 0x1d, 0xda, 0x96, 0x90, 0x81, 0x37, 0x47, 0x8b, 0xd5, 0x36, 0xcf, 0x4b, 0x77, 0x8a, 0xde},
    {0x1f, 0xe7, 0xa9, 0x01, 0x0b, 0x33, 0x41, 0xc2, 0xbd, 0x2b, 0x4a, 0xce, 0xc4, 0x6e, 0xdf, 0x28, 0x7a, 0x43, 0xb9, 0xb2, 0x11, 0x75, 0x30, 0x6c, 0x76, 0xa8, 0x1a, 0x57, 0x89, 0x93, 0x22, 0x47},
    {0x30, 0x81, 0xcd, 0x27, 0x7b, 0xcd, 0x1e, 0x37, 0x63, 0xea, 0x0b, 0xf5, 0xee, 0x59, 0x74, 0xc3, 0x79, 0x0f, 0x2b, 0x56, 0xed, 0x73, 0x2a, 0x1a, 0x11, 0x31, 0xbe, 0x17, 0x7d, 0xea, 0x42, 0x61},
}};

const std::array<std::array<std::array<uint8_t, 16>, 11>, num_keys> expected_aes128_round_keys = {{
    {{
        {0x9d, 0x79, 0xb1, 0xa3, 0x7f, 0x31, 0x80, 0x1c, 0xd1, 0x1a, 0x67, 0x06, 0xfb, 0x40, 0xd6, 0xbd},
        {0x95, 0x8f, 0xcb, 0xac, 0xea, 0xbe, 0x4b, 0xb0, 0x3b, 0xa4, 0x2c, 0xb6, 0xc0, 0xe4, 0xfa, 0x0b},
        {0xfe, 0xa2, 0xe0, 0x16, 0x14, 0x1c, 0xab, 0xa6, 0x2f, 0xb8, 0x87, 0x10, 0xef, 0x5c, 0x7d, 0x1b},
        {0xb0, 0x5d, 0x4f, 0xc9, 0xa4, 0x41, 0xe4, 0x6f, 0x8b, 0xf9, 0x63, 0x7f, 0x64, 0xa5, 0x1e, 0x64},
        {0xbe, 0x2f, 0x0c, 0x8a, 0x1a, 0x6e, 0xe8, 0xe5, 0x91, 0x97, 0x8b, 0x9a, 0xf5, 0x32, 0x95, 0xfe},
        {0x8d, 0x05, 0xb7, 0x6c, 0x97, 0x6b, 0x5f, 0x89, 0x06, 0xfc, 0xd4, 0x13, 0xf3, 0xce, 0x41, 0xed},
        {0x26, 0x86, 0xe2, 0x61, 0xb1, 0xed, 0xbd, 0xe8, 0xb7, 0x11, 0x69, 0xfb, 0x44, 0xdf, 0x28, 0x16},
        {0xf8, 0xb2, 0xa5, 0x7a, 0x49, 0x5f, 0x18, 0x92, 0xfe, 0x4e, 0x71, 0x69, 0xba, 0x91, 0x59, 0x7f},
        {0xf9, 0x79, 0x77, 0x8e, 0xb0, 0x26, 0x6f, 0x1c, 0x4e, 0x68, 0x1e, 0x75, 0xf4, 0xf9, 0x47, 0x0a},
        {0x7b, 0xd9, 0x10, 0x31, 0xcb, 0xff, 0x7f, 0x2d, 0x85, 0x97, 0x61, 0x58, 0x71, 0x6e, 0x26, 0x52},
        {0xd2, 0x2e, 0x10, 0x92, 0x19, 0xd1, 0x6f, 0xbf, 0x9c, 0x46, 0x0e, 0xe7, 0xed, 0x28, 0x28, 0xb5},
    }},
    {{
        {0x57, 0x52, 0x68, 0x46, 0x90, 0x3b, 0xb1, 0x3e, 0xde, 0x56, 0x24, 0x39, 0xe9, 0xc1, 0xb8, 0x23},
        {0x2e, 0x3e, 0x4e, 0x58, 0xbe, 0x05, 0xff, 0x66, 0x60, 0x53, 0xdb, 0x5f, 0x89, 0x92, 0x63, 0x7c},
        {0x63, 0xc5, 0x5e, 0xff, 0xdd, 0xc0, 0xa1, 0x99, 0xbd, 0x93, 0x7a, 0xc6, 0x34, 0x01, 0x19, 0xba},
        {0x1b, 0x11, 0xaa, 0xe7, 0xc6, 0xd1, 0x0b, 0x7e, 0x7b, 0x42, 0x71, 0xb8, 0x4f, 0x43, 0x68, 0x02},
        {0x09, 0x54, 0xdd, 0x63, 0xcf, 0x85, 0xd6, 0x1d, 0xb4, 0xc7, 0xa7, 0xa5, 0xfb, 0x84, 0xcf, 0xa7},
        {0x46, 0xde, 0x81, 0x6c, 0x89, 0x5b, 0x57, 0x71, 0x3d, 0x9c, 0xf0, 0xd4, 0xc6, 0x18, 0x3f, 0x73},
        {0xcb, 0xab, 0x0e, 0xd8, 0x42, 0xf0, 0x59, 0xa9, 0x7f, 0x6c, 0xa9, 0x7d, 0xb9, 0x74, 0x96, 0x0e},
        {0x19, 0x3b, 0xa5, 0x8e, 0x5b, 0xcb, 0xfc, 0x27, 0x24, 0xa7, 0x55, 0x5a, 0x9d, 0xd3, 0xc3, 0x54},
        {0xff, 0x15, 0x85, 0xd0, 0xa4, 0xde, 0x79, 0xf7, 0x80, 0x79, 0x2c, 0xad, 0x1d, 0xaa, 0xef, 0xf9},
        {0x48, 0xca, 0x1c, 0x74, 0xec, 0x14, 0x65, 0x83, 0x6c, 0x6d, 0x49, 0x2e, 0x71, 0xc7, 0xa6, 0xd7},
        {0xb8, 0xee, 0x12, 0xd7, 0x54, 0xfa, 0x77, 0x54, 0x38, 0x97, 0x3e, 0x7a, 0x49, 0x50, 0x98, 0xad},
    }},
    {{
        {0xa9, 0x60, 0x89, 0xbc, 0xa7, 0x1f, 0x3d, 0x1a, 0x6d, 0x2d, 0x3c, 0xad, 0xb3, 0x66, 0x9c, 0xbd},
        {0x9b, 0xbe, 0xf3, 0xd1, 0x3c, 0xa1, 0xce, 0xcb, 0x51, 0x8c, 0xf2, 0x66, 0xe2, 0xea, 0x6e, 0xdb},
        {0x1e, 0x21, 0x4a, 0x49, 0x22, 0x80, 0x84, 0x82, 0x73, 0x0c, 0x76, 0xe4, 0x91, 0xe6, 0x18, 0x3f},
        {0x94, 0x8c, 0x3f, 0xc8, 0xb6, 0x0c, 0xbb, 0x4a, 0xc5, 0x00, 0xcd, 0xae, 0x54, 0xe6, 0xd5, 0x91},
        {0x12, 0x8f, 0xbe, 0xe8, 0xa4, 0x83, 0x05, 0xa2, 0x61, 0x83, 0xc8, 0x0c, 0x35, 0x65, 0x1d, 0x9d},
        {0x4f, 0x2b, 0xe0, 0x7e, 0xeb, 0xa8, 0xe5, 0xdc, 0x8a, 0x2b, 0x2d, 0xd0, 0xbf, 0x4e, 0x30, 0x4d},
        {0x40, 0x2f, 0x03, 0x76, 0xab, 0x87, 0xe6, 0xaa, 0x21, 0xac, 0xcb, 0x7a, 0x9e, 0xe2, 0xfb, 0x37},
        {0x98, 0x20, 0x99, 0x7d, 0x33, 0xa7, 0x7f, 0xd7, 0x12, 0x0b, 0xb4, 0xad, 0x8c, 0xe9, 0x4f, 0x9a},
        {0x06, 0xa4, 0x21, 0x19, 0x35, 0x03, 0x5e, 0xce, 0x27, 0x08, 0xea, 0x63, 0xab, 0xe1, 0xa5, 0xf9},
        {0xe5, 0xa2, 0xb8, 0x7b, 0xd0, 0xa1, 0xe6, 0xb5, 0xf7, 0xa9, 0x0c, 0xd6, 0x5c, 0x48, 0xa9, 0x2f},
        {0x81, 0x71, 0xad, 0x31, 0x51, 0xd0, 0x4b, 0x84, 0xa6, 0x79, 0x47, 0x52, 0xfa, 0x31, 0xee, 0x7d},
    }},
}};
const std::array<std::array<std::array<uint8_t, 16>, 13>, num_keys> expected_aes192_round_keys = {{
    {{
        {0x50, 0xe1, 0x65, 0xe4, 0x34, 0x24, 0x9d, 0x8b, 0x82, 0x9f, 0x41, 0x16, 0x69, 0x84, 0x2a, 0x97},
        {0x99, 0x11, 0x03, 0x6c, 0xf3, 0xe8, 0x22, 0x08, 0xca, 0x72, 0x55, 0xe9, 0xfe, 0x56, 0xc8, 0x62},
        {0x7c, 0xc9, 0x89, 0x74, 0x15, 0x4d, 0xa3, 0xe3, 0x8c, 0x5c, 0xa0, 0x8f, 0x7f, 0xb4, 0x82, 0x87},
        {0x45, 0x61, 0x42, 0x3b, 0xbb, 0x37, 0x8a, 0x59, 0xc7, 0xfe, 0x03, 0x2d, 0xd2, 0xb3, 0xa0, 0xce},
        {0x5e, 0xef, 0x00, 0x41, 0x21, 0x5b, 0x82, 0xc6, 0x78, 0x72, 0xf6, 0xc6, 0xc3, 0x45, 0x7c, 0x9f},
        {0x04, 0xbb, 0x7f, 0xb2, 0xd6, 0x08, 0xdf, 0x7c, 0x88, 0xe7, 0xdf, 0x3d, 0xa9, 0xbc, 0x5d, 0xfb},
        {0x15, 0x3e, 0xf9, 0x15, 0xd6, 0x7b, 0x85, 0x8a, 0xd2, 0xc0, 0xfa, 0x38, 0x04, 0xc8, 0x25, 0x44},
        {0x8c, 0x2f, 0xfa, 0x79, 0x25, 0x93, 0xa7, 0x82, 0xd9, 0x62, 0xea, 0x2a, 0x0f, 0x19, 0x6f, 0xa0},
        {0xdd, 0xd9, 0x95, 0x98, 0xd9, 0x11, 0xb0, 0xdc, 0x55, 0x3e, 0x4a, 0xa5, 0x70, 0xad, 0xed, 0x27},
        {0x6c, 0x37, 0x26, 0x7b, 0x63, 0x2e, 0x49, 0xdb, 0xbe, 0xf7, 0xdc, 0x43, 0x67, 0xe6, 0x6c, 0x9f},
        {0x32, 0xd8, 0x26, 0x3a, 0x42, 0x75, 0xcb, 0x1d, 0xb1, 0x28, 0x82, 0x57, 0xd2, 0x06, 0xcb, 0x8c},
        {0x6c, 0xf1, 0x17, 0xcf, 0x0b, 0x17, 0x7b, 0x50, 0x39, 0xcf, 0x5d, 0x6a, 0x7b, 0xba, 0x96, 0x77},
        {0xc5, 0xb8, 0x77, 0x76, 0x17, 0xbe, 0xbc, 0xfa, 0x7b, 0x4f, 0xab, 0x35, 0x70, 0x58, 0xd0, 0x65},
    }},
    {{
        {0x6e, 0xca, 0xa0, 0x07, 0x5a, 0x69, 0xfc, 0x17, 0x8b, 0xa8, 0xf8, 0x37, 0x18, 0xaa, 0x8f, 0x3b},
        {0xd1, 0xf6, 0x5e, 0x81, 0x44, 0xe6, 0x1d, 0x9a, 0xe1, 0x6e, 0x18, 0x1c, 0xbb, 0x07, 0xe4, 0x0b},
        {0x30, 0xaf, 0x1c, 0x3c, 0x28, 0x05, 0x93, 0x07, 0xf9, 0xf3, 0xcd, 0x86, 0xbd, 0x15, 0xd0, 0x1c},
        {0xba, 0x1e, 0x84, 0x66, 0x01, 0x19, 0x60, 0x6d, 0x31, 0xb6, 0x7c, 0x51, 0x19, 0xb3, 0xef, 0x56},
        {0xe0, 0x40, 0x22, 0xd0, 0x5d, 0x55, 0xf2, 0xcc, 0x42, 0x97, 0xcf, 0x2a, 0x43, 0x8e, 0xaf, 0x47},
        {0x72, 0x38, 0xd3, 0x16, 0x6b, 0x8b, 0x3c, 0x40, 0x8b, 0xcb, 0x1e, 0x90, 0xd6, 0x9e, 0xec, 0x5c},
        {0x41, 0x59, 0x85, 0xdc, 0x02, 0xd7, 0x2a, 0x9b, 0x70, 0xef, 0xf9, 0x8d, 0x1b, 0x64, 0xc5, 0xcd},
        {0x90, 0xaf, 0xdb, 0x5d, 0x46, 0x31, 0x37, 0x01, 0x96, 0xc3, 0xf9, 0x86, 0x94, 0x14, 0xd3, 0x1d},
        {0xe4, 0xfb, 0x2a, 0x90, 0xff, 0x9f, 0xef, 0x5d, 0x6f, 0x30, 0x34, 0x00, 0x29, 0x01, 0x03, 0x01},
        {0xca, 0xb8, 0x85, 0x23, 0x5e, 0xac, 0x56, 0x3e, 0xba, 0x57, 0x7c, 0xae, 0x45, 0xc8, 0x93, 0xf3},
        {0x2a, 0xf8, 0xa7, 0xf3, 0x03, 0xf9, 0xa4, 0xf2, 0x13, 0xf1, 0x0c, 0x58, 0x4d, 0x5d, 0x5a, 0x66},
        {0xf7, 0x0a, 0x26, 0xc8, 0xb2, 0xc2, 0xb5, 0x3b, 0x98, 0x3a, 0x12, 0xc8, 0x9b, 0xc3, 0xb6, 0x3a},
        {0xbd, 0xbf, 0x8c, 0x4c, 0xf0, 0xe2, 0xd6, 0x2a, 0x07, 0xe8, 0xf0, 0xe2, 0xb5, 0x2a, 0x45, 0xd9},
    }},
    {{
        {0xb3, 0x0f, 0xcb, 0x06, 0xa6, 0xc1, 0xad, 0x8f, 0x29, 0x06, 0xe7, 0x32, 0xb1, 0x0f, 0x4d, 0xb7},
        {0x89, 0xd3, 0x5e, 0xa6, 0x8c, 0x08, 0x8a, 0xb3, 0x82, 0x71, 0xa6, 0x62, 0x24, 0xb0, 0x0b, 0xed},
        {0x0d, 0xb6, 0xec, 0xdf, 0xbc, 0xb9, 0xa1, 0x68, 0x35, 0x6a, 0xff, 0xce, 0xb9, 0x62, 0x75, 0x7d},
        {0x2a, 0xec, 0x59, 0x34, 0x0e, 0x5c, 0x52, 0xd9, 0x03, 0xea, 0xbe, 0x06, 0xbf, 0x53, 0x1f, 0x6e},
        {0x8a, 0x39, 0xe0, 0xa0, 0x33, 0x5b, 0x95, 0xdd, 0x17, 0xc6, 0x98, 0xf7, 0x19, 0x9a, 0xca, 0x2e},
        {0x1a, 0x70, 0x74, 0x28, 0xa5, 0x23, 0x6b, 0x46, 0x2f, 0x1a, 0x8b, 0xe6, 0x1c, 0x41, 0x1e, 0x3b},
        {0x9c, 0xb4, 0x7a, 0x6b, 0x85, 0x2e, 0xb0, 0x45, 0x9f, 0x5e, 0xc4, 0x6d, 0x3a, 0x7d, 0xaf, 0x2b},
        {0x15, 0x67, 0x24, 0xcd, 0x09, 0x26, 0x3a, 0xf6, 0x7b, 0x34, 0x38, 0x6a, 0xfe, 0x1a, 0x88, 0x2f},
        {0x61, 0x44, 0x4c, 0x42, 0x5b, 0x39, 0xe3, 0x69, 0x4e, 0x5e, 0xc7, 0xa4, 0x47, 0x78, 0xfd, 0x52},
        {0xe7, 0x60, 0x38, 0xca, 0x19, 0x7a, 0xb0, 0xe5, 0x78, 0x3e, 0xfc, 0xa7, 0x23, 0x07, 0x1f, 0xce},
        {0x6d, 0x59, 0xd8, 0x6a, 0x2a, 0x21, 0x25, 0x38, 0x5a, 0x5f, 0x3f, 0x2f, 0x43, 0x25, 0x8f, 0xca},
        {0x3b, 0x1b, 0x73, 0x6d, 0x18, 0x1c, 0x6c, 0xa3, 0x75, 0x45, 0xb4, 0xc9, 0x5f, 0x64, 0x91, 0xf1},
        {0x99, 0xde, 0x9e, 0xe0, 0xda, 0xfb, 0x11, 0x2a, 0xe1, 0xe0, 0x62, 0x47, 0xf9, 0xfc, 0x0e, 0xe4},
    }},
}};
const std::array<std::array<std::array<uint8_t, 16>, 15>, num_keys> expected_aes256_round_keys = {{
    {{
        {0xf6, 0x48, 0x81, 0x8b, 0xa4, 0xa6, 0x65, 0x6b, 0xe0, 0xcb, 0x6e, 0x38, 0x2a, 0x5d, 0xff, 0x72},
        {0xac, 0x1d, 0xda, 0x96, 0x90, 0x81, 0x37, 0x47, 0x8b, 0xd5, 0x36, 0xcf, 0x4b, 0x77, 0x8a, 0xde},
        {0x02, 0x36, 0x9c, 0x38, 0xa6, 0x90, 0xf9, 0x53, 0x46, 0x5b, 0x97, 0x6b, 0x6c, 0x06, 0x68, 0x19},
        {0xfc, 0x72, 0x9f, 0x42, 0x6c, 0xf3, 0xa8, 0x05, 0xe7, 0x26, 0x9e, 0xca, 0xac, 0x51, 0x14, 0x14},
        {0xd1, 0xcc, 0x66, 0xa9, 0x77, 0x5c, 0x9f, 0xfa, 0x31, 0x07, 0x08, 0x91, 0x5d, 0x01, 0x60, 0x88},
        {0xb0, 0x0e, 0x4f, 0x86, 0xdc, 0xfd, 0xe7, 0x83, 0x3b, 0xdb, 0x79, 0x49, 0x97, 0x8a, 0x6d, 0x5d},
        {0xab, 0xf0, 0x2a, 0x21, 0xdc, 0xac, 0xb5, 0xdb, 0xed, 0xab, 0xbd, 0x4a, 0xb0, 0xaa, 0xdd, 0xc2},
        {0x57, 0xa2, 0x8e, 0xa3, 0x8b, 0x5f, 0x69, 0x20, 0xb0, 0x84, 0x10, 0x69, 0x27, 0x0e, 0x7d, 0x34},
        {0x08, 0x0f, 0x32, 0xed, 0xd4, 0xa3, 0x87, 0x36, 0x39, 0x08, 0x3a, 0x7c, 0x89, 0xa2, 0xe7, 0xbe},
        {0xf0, 0x98, 0x1a, 0x0d, 0x7b, 0xc7, 0x73, 0x2d, 0xcb, 0x43, 0x63, 0x44, 0xec, 0x4d, 0x1e, 0x70},
        {0xfb, 0x7d, 0x63, 0x23, 0x2f, 0xde, 0xe4, 0x15, 0x16, 0xd6, 0xde, 0x69, 0x9f, 0x74, 0x39, 0xd7},
        {0x2b, 0x0a, 0x08, 0x03, 0x50, 0xcd, 0x7b, 0x2e, 0x9b, 0x8e, 0x18, 0x6a, 0x77, 0xc3, 0x06, 0x1a},
        {0xf5, 0x12, 0xc1, 0xd6, 0xda, 0xcc, 0x25, 0xc3, 0xcc, 0x1a, 0xfb, 0xaa, 0x53, 0x6e, 0xc2, 0x7d},
        {0xc6, 0x95, 0x2d, 0xfc, 0x96, 0x58, 0x56, 0xd2, 0x0d, 0xd6, 0x4e, 0xb8, 0x7a, 0x15, 0x48, 0xa2},
        {0xec, 0x40, 0xfb, 0x0c, 0x36, 0x8c, 0xde, 0xcf, 0xfa, 0x96, 0x25, 0x65, 0xa9, 0xf8, 0xe7, 0x18},
    }},
    {{
        {0x1f, 0xe7, 0xa9, 0x01, 0x0b, 0x33, 0x41, 0xc2, 0xbd, 0x2b, 0x4a, 0xce, 0xc4, 0x6e, 0xdf, 0x28},
        {0x7a, 0x43, 0xb9, 0xb2, 0x11, 0x75, 0x30, 0x6c, 0x76, 0xa8, 0x1a, 0x57, 0x89, 0x93, 0x22, 0x47},
        {0xc2, 0x74, 0x09, 0xa6, 0xc9, 0x47, 0x48, 0x64, 0x74, 0x6c, 0x02, 0xaa, 0xb0, 0x02, 0xdd, 0x82},
        {0x9d, 0x34, 0x78, 0xa1, 0x8c, 0x41, 0x48, 0xcd, 0xfa, 0xe9, 0x52, 0x9a, 0x73, 0x7a, 0x70, 0xdd},
        {0x1a, 0x25, 0xc8, 0x29, 0xd3, 0x62, 0x80, 0x4d, 0xa7, 0x0e, 0x82, 0xe7, 0x17, 0x0c, 0x5f, 0x65},
        {0x6d, 0xca, 0xb7, 0xec, 0xe1, 0x8b, 0xff, 0x21, 0x1b, 0x62, 0xad, 0xbb, 0x68, 0x18, 0xdd, 0x66},
        {0xb3, 0xe4, 0xfb, 0x6c, 0x60, 0x86, 0x7b, 0x21, 0xc7, 0x88, 0xf9, 0xc6, 0xd0, 0x84, 0xa6, 0xa3},
        {0x1d, 0x95, 0x93, 0xe6, 0xfc, 0x1e, 0x6c, 0xc7, 0xe7, 0x7c, 0xc1, 0x7c, 0x8f, 0x64, 0x1c, 0x1a},
        {0xf8, 0x78, 0x59, 0x1f, 0x98, 0xfe, 0x22, 0x3e, 0x5f, 0x76, 0xdb, 0xf8, 0x8f, 0xf2, 0x7d, 0x5b},
        {0x6e, 0x1c, 0x6c, 0xdf, 0x92, 0x02, 0x00, 0x18, 0x75, 0x7e, 0xc1, 0x64, 0xfa, 0x1a, 0xdd, 0x7e},
        {0x4a, 0xb9, 0xaa, 0x32, 0xd2, 0x47, 0x88, 0x0c, 0x8d, 0x31, 0x53, 0xf4, 0x02, 0xc3, 0x2e, 0xaf},
        {0x19, 0x32, 0x5d, 0xa6, 0x8b, 0x30, 0x5d, 0xbe, 0xfe, 0x4e, 0x9c, 0xda, 0x04, 0x54, 0x41, 0xa4},
        {0x4a, 0x3a, 0xe3, 0xc0, 0x98, 0x7d, 0x6b, 0xcc, 0x15, 0x4c, 0x38, 0x38, 0x17, 0x8f, 0x16, 0x97},
        {0xe9, 0x41, 0x1a, 0x2e, 0x62, 0x71, 0x47, 0x90, 0x9c, 0x3f, 0xdb, 0x4a, 0x98, 0x6b, 0x9a, 0xee},
        {0x75, 0x82, 0xcb, 0x86, 0xed, 0xff, 0xa0, 0x4a, 0xf8, 0xb3, 0x98, 0x72, 0xef, 0x3c, 0x8e, 0xe5},
    }},
    {{
        {0x30, 0x81, 0xcd, 0x27, 0x7b, 0xcd, 0x1e, 0x37, 0x63, 0xea, 0x0b, 0xf5, 0xee, 0x59, 0x74, 0xc3},
        {0x79, 0x0f, 0x2b, 0x56, 0xed, 0x73, 0x2a, 0x1a, 0x11, 0x31, 0xbe, 0x17, 0x7d, 0xea, 0x42, 0x61},
        {0xb6, 0xad, 0x22, 0xd8, 0xcd, 0x60, 0x3c, 0xef, 0xae, 0x8a, 0x37, 0x1a, 0x40, 0xd3, 0x43, 0xd9},
        {0x70, 0x69, 0x31, 0x63, 0x9d, 0x1a, 0x1b, 0x79, 0x8c, 0x2b, 0xa5, 0x6e, 0xf1, 0xc1, 0xe7, 0x0f},
        {0xcc, 0x39, 0x54, 0x79, 0x01, 0x59, 0x68, 0x96, 0xaf, 0xd3, 0x5f, 0x8c, 0xef, 0x00, 0x1c, 0x55},
        {0xaf, 0x0a, 0xad, 0x9f, 0x32, 0x10, 0xb6, 0xe6, 0xbe, 0x3b, 0x13, 0x88, 0x4f, 0xfa, 0xf4, 0x87},
        {0xe5, 0x86, 0x43, 0xfd, 0xe4, 0xdf, 0x2b, 0x6b, 0x4b, 0x0c, 0x74, 0xe7, 0xa4, 0x0c, 0x68, 0xb2},
        {0xe6, 0xf4, 0xe8, 0xa8, 0xd4, 0xe4, 0x5e, 0x4e, 0x6a, 0xdf, 0x4d, 0xc6, 0x25, 0x25, 0xb9, 0x41},
        {0xd2, 0xd0, 0xc0, 0xc2, 0x36, 0x0f, 0xeb, 0xa9, 0x7d, 0x03, 0x9f, 0x4e, 0xd9, 0x0f, 0xf7, 0xfc},
        {0xd3, 0x82, 0x80, 0x18, 0x07, 0x66, 0xde, 0x56, 0x6d, 0xb9, 0x93, 0x90, 0x48, 0x9c, 0x2a, 0xd1},
        {0x1c, 0x35, 0xfe, 0x90, 0x2a, 0x3a, 0x15, 0x39, 0x57, 0x39, 0x8a, 0x77, 0x8e, 0x36, 0x7d, 0x8b},
        {0xca, 0x87, 0x7f, 0x25, 0xcd, 0xe1, 0xa1, 0x73, 0xa0, 0x58, 0x32, 0xe3, 0xe8, 0xc4, 0x18, 0x32},
        {0x20, 0x98, 0xdd, 0x0b, 0x0a, 0xa2, 0xc8, 0x32, 0x5d, 0x9b, 0x42, 0x45, 0xd3, 0xad, 0x3f, 0xce},
        {0xac, 0x12, 0x0a, 0xae, 0x61, 0xf3, 0xab, 0xdd, 0xc1, 0xab, 0x99, 0x3e, 0x29, 0x6f, 0x81, 0x0c},
        {0xc8, 0x94, 0x23, 0xae, 0xc2, 0x36, 0xeb, 0x9c, 0x9f, 0xad, 0xa9, 0xd9, 0x4c, 0x00, 0x96, 0x17},
    }},
}};
const std::array<std::array<std::array<uint8_t, 24>, 13>, num_keys> expected_rijndael192_round_keys = {{
    {{
        {0x50, 0xe1, 0x65, 0xe4, 0x34, 0x24, 0x9d, 0x8b, 0x82, 0x9f, 0x41, 0x16, 0x69, 0x84, 0x2a, 0x97, 0x99, 0x11, 0x03, 0x6c, 0xf3, 0xe8, 0x22, 0x08},
        {0xca, 0x72, 0x55, 0xe9, 0xfe, 0x56, 0xc8, 0x62, 0x7c, 0xc9, 0x89, 0x74, 0x15, 0x4d, 0xa3, 0xe3, 0x8c, 0x5c, 0xa0, 0x8f, 0x7f, 0xb4, 0x82, 0x87},
        {0x45, 0x61, 0x42, 0x3b, 0xbb, 0x37, 0x8a, 0x59, 0xc7, 0xfe, 0x03, 0x2d, 0xd2, 0xb3, 0xa0, 0xce, 0x5e, 0xef, 0x00, 0x41, 0x21, 0x5b, 0x82, 0xc6},
        {0x78, 0x72, 0xf6, 0xc6, 0xc3, 0x45, 0x7c, 0x9f, 0x04, 0xbb, 0x7f, 0xb2, 0xd6, 0x08, 0xdf, 0x7c, 0x88, 0xe7, 0xdf, 0x3d, 0xa9, 0xbc, 0x5d, 0xfb},
        {0x15, 0x3e, 0xf9, 0x15, 0xd6, 0x7b, 0x85, 0x8a, 0xd2, 0xc0, 0xfa, 0x38, 0x04, 0xc8, 0x25, 0x44, 0x8c, 0x2f, 0xfa, 0x79, 0x25, 0x93, 0xa7, 0x82},
        {0xd9, 0x62, 0xea, 0x2a, 0x0f, 0x19, 0x6f, 0xa0, 0xdd, 0xd9, 0x95, 0x98, 0xd9, 0x11, 0xb0, 0xdc, 0x55, 0x3e, 0x4a, 0xa5, 0x70, 0xad, 0xed, 0x27},
        {0x6c, 0x37, 0x26, 0x7b, 0x63, 0x2e, 0x49, 0xdb, 0xbe, 0xf7, 0xdc, 0x43, 0x67, 0xe6, 0x6c, 0x9f, 0x32, 0xd8, 0x26, 0x3a, 0x42, 0x75, 0xcb, 0x1d},
        {0xb1, 0x28, 0x82, 0x57, 0xd2, 0x06, 0xcb, 0x8c, 0x6c, 0xf1, 0x17, 0xcf, 0x0b, 0x17, 0x7b, 0x50, 0x39, 0xcf, 0x5d, 0x6a, 0x7b, 0xba, 0x96, 0x77},
        {0xc5, 0xb8, 0x77, 0x76, 0x17, 0xbe, 0xbc, 0xfa, 0x7b, 0x4f, 0xab, 0x35, 0x70, 0x58, 0xd0, 0x65, 0x49, 0x97, 0x8d, 0x0f, 0x32, 0x2d, 0x1b, 0x78},
        {0x06, 0x17, 0xcb, 0x55, 0x11, 0xa9, 0x77, 0xaf, 0x6a, 0xe6, 0xdc, 0x9a, 0x1a, 0xbe, 0x0c, 0xff, 0x53, 0x29, 0x81, 0xf0, 0x61, 0x04, 0x9a, 0x88},
        {0xc2, 0xaf, 0x0f, 0xba, 0xd3, 0x06, 0x78, 0x15, 0xb9, 0xe0, 0xa4, 0x8f, 0xa3, 0x5e, 0xa8, 0x70, 0xf0, 0x77, 0x29, 0x80, 0x91, 0x73, 0xb3, 0x08},
        {0x21, 0xc2, 0x3f, 0x3b, 0xf2, 0xc4, 0x47, 0x2e, 0x4b, 0x24, 0xe3, 0xa1, 0xe8, 0x7a, 0x4b, 0xd1, 0x18, 0x0d, 0x62, 0x51, 0x89, 0x7e, 0xd1, 0x59},
        {0x0a, 0xfc, 0xf4, 0x9c, 0xf8, 0x38, 0xb3, 0xb2, 0xb3, 0x1c, 0x50, 0x13, 0x5b, 0x66, 0x1b, 0xc2, 0x43, 0x6b, 0x79, 0x93, 0xca, 0x15, 0xa8, 0xca},
    }},
    {{
        {0x6e, 0xca, 0xa0, 0x07, 0x5a, 0x69, 0xfc, 0x17, 0x8b, 0xa8, 0xf8, 0x37, 0x18, 0xaa, 0x8f, 0x3b, 0xd1, 0xf6, 0x5e, 0x81, 0x44, 0xe6, 0x1d, 0x9a},
        {0xe1, 0x6e, 0x18, 0x1c, 0xbb, 0x07, 0xe4, 0x0b, 0x30, 0xaf, 0x1c, 0x3c, 0x28, 0x05, 0x93, 0x07, 0xf9, 0xf3, 0xcd, 0x86, 0xbd, 0x15, 0xd0, 0x1c},
        {0xba, 0x1e, 0x84, 0x66, 0x01, 0x19, 0x60, 0x6d, 0x31, 0xb6, 0x7c, 0x51, 0x19, 0xb3, 0xef, 0x56, 0xe0, 0x40, 0x22, 0xd0, 0x5d, 0x55, 0xf2, 0xcc},
        {0x42, 0x97, 0xcf, 0x2a, 0x43, 0x8e, 0xaf, 0x47, 0x72, 0x38, 0xd3, 0x16, 0x6b, 0x8b, 0x3c, 0x40, 0x8b, 0xcb, 0x1e, 0x90, 0xd6, 0x9e, 0xec, 0x5c},
        {0x41, 0x59, 0x85, 0xdc, 0x02, 0xd7, 0x2a, 0x9b, 0x70, 0xef, 0xf9, 0x8d, 0x1b, 0x64, 0xc5, 0xcd, 0x90, 0xaf, 0xdb, 0x5d, 0x46, 0x31, 0x37, 0x01},
        {0x96, 0xc3, 0xf9, 0x86, 0x94, 0x14, 0xd3, 0x1d, 0xe4, 0xfb, 0x2a, 0x90, 0xff, 0x9f, 0xef, 0x5d, 0x6f, 0x30, 0x34, 0x00, 0x29, 0x01, 0x03, 0x01},
        {0xca, 0xb8, 0x85, 0x23, 0x5e, 0xac, 0x56, 0x3e, 0xba, 0x57, 0x7c, 0xae, 0x45, 0xc8, 0x93, 0xf3, 0x2a, 0xf8, 0xa7, 0xf3, 0x03, 0xf9, 0xa4, 0xf2},
        {0x13, 0xf1, 0x0c, 0x58, 0x4d, 0x5d, 0x5a, 0x66, 0xf7, 0x0a, 0x26, 0xc8, 0xb2, 0xc2, 0xb5, 0x3b, 0x98, 0x3a, 0x12, 0xc8, 0x9b, 0xc3, 0xb6, 0x3a},
        {0xbd, 0xbf, 0x8c, 0x4c, 0xf0, 0xe2, 0xd6, 0x2a, 0x07, 0xe8, 0xf0, 0xe2, 0xb5, 0x2a, 0x45, 0xd9, 0x2d, 0x10, 0x57, 0x11, 0xb6, 0xd3, 0xe1, 0x2b},
        {0xc0, 0x47, 0x7d, 0x02, 0x30, 0xa5, 0xab, 0x28, 0x37, 0x4d, 0x5b, 0xca, 0x82, 0x67, 0x1e, 0x13, 0xaf, 0x77, 0x49, 0x02, 0x19, 0xa4, 0xa8, 0x29},
        {0xbf, 0x85, 0xd8, 0xd6, 0x8f, 0x20, 0x73, 0xfe, 0xb8, 0x6d, 0x28, 0x34, 0x3a, 0x0a, 0x36, 0x27, 0x95, 0x7d, 0x7f, 0x25, 0x8c, 0xd9, 0xd7, 0x0c},
        {0xe6, 0x8b, 0x26, 0xb2, 0x69, 0xab, 0x55, 0x4c, 0xd1, 0xc6, 0x7d, 0x78, 0xeb, 0xcc, 0x4b, 0x5f, 0x7e, 0xb1, 0x34, 0x7a, 0xf2, 0x68, 0xe3, 0x76},
        {0x7b, 0x9a, 0x1e, 0x3b, 0x12, 0x31, 0x4b, 0x77, 0xc3, 0xf7, 0x36, 0x0f, 0x28, 0x3b, 0x7d, 0x50, 0x56, 0x8a, 0x49, 0x2a, 0xa4, 0xe2, 0xaa, 0x5c},
    }},
    {{
        {0xb3, 0x0f, 0xcb, 0x06, 0xa6, 0xc1, 0xad, 0x8f, 0x29, 0x06, 0xe7, 0x32, 0xb1, 0x0f, 0x4d, 0xb7, 0x89, 0xd3, 0x5e, 0xa6, 0x8c, 0x08, 0x8a, 0xb3},
        {0x82, 0x71, 0xa6, 0x62, 0x24, 0xb0, 0x0b, 0xed, 0x0d, 0xb6, 0xec, 0xdf, 0xbc, 0xb9, 0xa1, 0x68, 0x35, 0x6a, 0xff, 0xce, 0xb9, 0x62, 0x75, 0x7d},
        {0x2a, 0xec, 0x59, 0x34, 0x0e, 0x5c, 0x52, 0xd9, 0x03, 0xea, 0xbe, 0x06, 0xbf, 0x53, 0x1f, 0x6e, 0x8a, 0x39, 0xe0, 0xa0, 0x33, 0x5b, 0x95, 0xdd},
        {0x17, 0xc6, 0x98, 0xf7, 0x19, 0x9a, 0xca, 0x2e, 0x1a, 0x70, 0x74, 0x28, 0xa5, 0x23, 0x6b, 0x46, 0x2f, 0x1a, 0x8b, 0xe6, 0x1c, 0x41, 0x1e, 0x3b},
        {0x9c, 0xb4, 0x7a, 0x6b, 0x85, 0x2e, 0xb0, 0x45, 0x9f, 0x5e, 0xc4, 0x6d, 0x3a, 0x7d, 0xaf, 0x2b, 0x15, 0x67, 0x24, 0xcd, 0x09, 0x26, 0x3a, 0xf6},
        {0x7b, 0x34, 0x38, 0x6a, 0xfe, 0x1a, 0x88, 0x2f, 0x61, 0x44, 0x4c, 0x42, 0x5b, 0x39, 0xe3, 0x69, 0x4e, 0x5e, 0xc7, 0xa4, 0x47, 0x78, 0xfd, 0x52},
        {0xe7, 0x60, 0x38, 0xca, 0x19, 0x7a, 0xb0, 0xe5, 0x78, 0x3e, 0xfc, 0xa7, 0x23, 0x07, 0x1f, 0xce, 0x6d, 0x59, 0xd8, 0x6a, 0x2a, 0x21, 0x25, 0x38},
        {0x5a, 0x5f, 0x3f, 0x2f, 0x43, 0x25, 0x8f, 0xca, 0x3b, 0x1b, 0x73, 0x6d, 0x18, 0x1c, 0x6c, 0xa3, 0x75, 0x45, 0xb4, 0xc9, 0x5f, 0x64, 0x91, 0xf1},
        {0x99, 0xde, 0x9e, 0xe0, 0xda, 0xfb, 0x11, 0x2a, 0xe1, 0xe0, 0x62, 0x47, 0xf9, 0xfc, 0x0e, 0xe4, 0x8c, 0xb9, 0xba, 0x2d, 0xd3, 0xdd, 0x2b, 0xdc},
        {0x43, 0x2f, 0x18, 0x86, 0x99, 0xd4, 0x09, 0xac, 0x78, 0x34, 0x6b, 0xeb, 0x81, 0xc8, 0x65, 0x0f, 0x0d, 0x71, 0xdf, 0x22, 0xde, 0xac, 0xf4, 0xfe},
        {0xe4, 0x90, 0xa3, 0x9b, 0x7d, 0x44, 0xaa, 0x37, 0x05, 0x70, 0xc1, 0xdc, 0x84, 0xb8, 0xa4, 0xd3, 0x89, 0xc9, 0x7b, 0xf1, 0x57, 0x65, 0x8f, 0x0f},
        {0xc5, 0xe3, 0xd5, 0xc0, 0xb8, 0xa7, 0x7f, 0xf7, 0xbd, 0xd7, 0xbe, 0x2b, 0x39, 0x6f, 0x1a, 0xf8, 0xb0, 0xa6, 0x61, 0x09, 0xe7, 0xc3, 0xee, 0x06},
        {0x33, 0xcb, 0xba, 0x54, 0x8b, 0x6c, 0xc5, 0xa3, 0x36, 0xbb, 0x7b, 0x88, 0x0f, 0xd4, 0x61, 0x70, 0xbf, 0x72, 0x00, 0x79, 0x58, 0xb1, 0xee, 0x7f},
    }},
}};
const std::array<std::array<std::array<uint8_t, 32>, 15>, num_keys> expected_rijndael256_round_keys = {{
    {{
        {0xf6, 0x48, 0x81, 0x8b, 0xa4, 0xa6, 0x65, 0x6b, 0xe0, 0xcb, 0x6e, 0x38, 0x2a, 0x5d, 0xff, 0x72, 0xac, 0x1d, 0xda, 0x96, 0x90, 0x81, 0x37, 0x47, 0x8b, 0xd5, 0x36, 0xcf, 0x4b, 0x77, 0x8a, 0xde},
        {0x02, 0x36, 0x9c, 0x38, 0xa6, 0x90, 0xf9, 0x53, 0x46, 0x5b, 0x97, 0x6b, 0x6c, 0x06, 0x68, 0x19, 0xfc, 0x72, 0x9f, 0x42, 0x6c, 0xf3, 0xa8, 0x05, 0xe7, 0x26, 0x9e, 0xca, 0xac, 0x51, 0x14, 0x14},
        {0xd1, 0xcc, 0x66, 0xa9, 0x77, 0x5c, 0x9f, 0xfa, 0x31, 0x07, 0x08, 0x91, 0x5d, 0x01, 0x60, 0x88, 0xb0, 0x0e, 0x4f, 0x86, 0xdc, 0xfd, 0xe7, 0x83, 0x3b, 0xdb, 0x79, 0x49, 0x97, 0x8a, 0x6d, 0x5d},
        {0xab, 0xf0, 0x2a, 0x21, 0xdc, 0xac, 0xb5, 0xdb, 0xed, 0xab, 0xbd, 0x4a, 0xb0, 0xaa, 0xdd, 0xc2, 0x57, 0xa2, 0x8e, 0xa3, 0x8b, 0x5f, 0x69, 0x20, 0xb0, 0x84, 0x10, 0x69, 0x27, 0x0e, 0x7d, 0x34},
        {0x08, 0x0f, 0x32, 0xed, 0xd4, 0xa3, 0x87, 0x36, 0x39, 0x08, 0x3a, 0x7c, 0x89, 0xa2, 0xe7, 0xbe, 0xf0, 0x98, 0x1a, 0x0d, 0x7b, 0xc7, 0x73, 0x2d, 0xcb, 0x43, 0x63, 0x44, 0xec, 0x4d, 0x1e, 0x70},
        {0xfb, 0x7d, 0x63, 0x23, 0x2f, 0xde, 0xe4, 0x15, 0x16, 0xd6, 0xde, 0x69, 0x9f, 0x74, 0x39, 0xd7, 0x2b, 0x0a, 0x08, 0x03, 0x50, 0xcd, 0x7b, 0x2e, 0x9b, 0x8e, 0x18, 0x6a, 0x77, 0xc3, 0x06, 0x1a},
        {0xf5, 0x12, 0xc1, 0xd6, 0xda, 0xcc, 0x25, 0xc3, 0xcc, 0x1a, 0xfb, 0xaa, 0x53, 0x6e, 0xc2, 0x7d, 0xc6, 0x95, 0x2d, 0xfc, 0x96, 0x58, 0x56, 0xd2, 0x0d, 0xd6, 0x4e, 0xb8, 0x7a, 0x15, 0x48, 0xa2},
        {0xec, 0x40, 0xfb, 0x0c, 0x36, 0x8c, 0xde, 0xcf, 0xfa, 0x96, 0x25, 0x65, 0xa9, 0xf8, 0xe7, 0x18, 0x15, 0xd4, 0xb9, 0x51, 0x83, 0x8c, 0xef, 0x83, 0x8e, 0x5a, 0xa1, 0x3b, 0xf4, 0x4f, 0xe9, 0x99},
        {0xe8, 0x5e, 0x15, 0xb3, 0xde, 0xd2, 0xcb, 0x7c, 0x24, 0x44, 0xee, 0x19, 0x8d, 0xbc, 0x09, 0x01, 0x48, 0xb1, 0xb8, 0x2d, 0xcb, 0x3d, 0x57, 0xae, 0x45, 0x67, 0xf6, 0x95, 0xb1, 0x28, 0x1f, 0x0c},
        {0xc7, 0x9e, 0xeb, 0x7b, 0x19, 0x4c, 0x20, 0x07, 0x3d, 0x08, 0xce, 0x1e, 0xb0, 0xb4, 0xc7, 0x1f, 0xaf, 0x3c, 0x7e, 0xed, 0x64, 0x01, 0x29, 0x43, 0x21, 0x66, 0xdf, 0xd6, 0x90, 0x4e, 0xc0, 0xda},
        {0xde, 0x24, 0xbc, 0x1b, 0xc7, 0x68, 0x9c, 0x1c, 0xfa, 0x60, 0x52, 0x02, 0x4a, 0xd4, 0x95, 0x1d, 0x79, 0x74, 0x54, 0x49, 0x1d, 0x75, 0x7d, 0x0a, 0x3c, 0x13, 0xa2, 0xdc, 0xac, 0x5d, 0x62, 0x06},
        {0xfe, 0x8e, 0xd3, 0x8a, 0x39, 0xe6, 0x4f, 0x96, 0xc3, 0x86, 0x1d, 0x94, 0x89, 0x52, 0x88, 0x89, 0xde, 0x74, 0x90, 0xee, 0xc3, 0x01, 0xed, 0xe4, 0xff, 0x12, 0x4f, 0x38, 0x53, 0x4f, 0x2d, 0x3e},
        {0xa2, 0x56, 0x61, 0x67, 0x9b, 0xb0, 0x2e, 0xf1, 0x58, 0x36, 0x33, 0x65, 0xd1, 0x64, 0xbb, 0xec, 0xe0, 0x37, 0x7a, 0x20, 0x23, 0x36, 0x97, 0xc4, 0xdc, 0x24, 0xd8, 0xfc, 0x8f, 0x6b, 0xf5, 0xc2},
        {0x76, 0xb0, 0x44, 0x14, 0xed, 0x00, 0x6a, 0xe5, 0xb5, 0x36, 0x59, 0x80, 0x64, 0x52, 0xe2, 0x6c, 0xa3, 0x37, 0xe2, 0x70, 0x80, 0x01, 0x75, 0xb4, 0x5c, 0x25, 0xad, 0x48, 0xd3, 0x4e, 0x58, 0x8a},
        {0x14, 0xda, 0x3a, 0x72, 0xf9, 0xda, 0x50, 0x97, 0x4c, 0xec, 0x09, 0x17, 0x28, 0xbe, 0xeb, 0x7b, 0x97, 0x99, 0x0b, 0x51, 0x17, 0x98, 0x7e, 0xe5, 0x4b, 0xbd, 0xd3, 0xad, 0x98, 0xf3, 0x8b, 0x27},
    }},
    {{
        {0x1f, 0xe7, 0xa9, 0x01, 0x0b, 0x33, 0x41, 0xc2, 0xbd, 0x2b, 0x4a, 0xce, 0xc4, 0x6e, 0xdf, 0x28, 0x7a, 0x43, 0xb9, 0xb2, 0x11, 0x75, 0x30, 0x6c, 0x76, 0xa8, 0x1a, 0x57, 0x89, 0x93, 0x22, 0x47},
        {0xc2, 0x74, 0x09, 0xa6, 0xc9, 0x47, 0x48, 0x64, 0x74, 0x6c, 0x02, 0xaa, 0xb0, 0x02, 0xdd, 0x82, 0x9d, 0x34, 0x78, 0xa1, 0x8c, 0x41, 0x48, 0xcd, 0xfa, 0xe9, 0x52, 0x9a, 0x73, 0x7a, 0x70, 0xdd},
        {0x1a, 0x25, 0xc8, 0x29, 0xd3, 0x62, 0x80, 0x4d, 0xa7, 0x0e, 0x82, 0xe7, 0x17, 0x0c, 0x5f, 0x65, 0x6d, 0xca, 0xb7, 0xec, 0xe1, 0x8b, 0xff, 0x21, 0x1b, 0x62, 0xad, 0xbb, 0x68, 0x18, 0xdd, 0x66},
        {0xb3, 0xe4, 0xfb, 0x6c, 0x60, 0x86, 0x7b, 0x21, 0xc7, 0x88, 0xf9, 0xc6, 0xd0, 0x84, 0xa6, 0xa3, 0x1d, 0x95, 0x93, 0xe6, 0xfc, 0x1e, 0x6c, 0xc7, 0xe7, 0x7c, 0xc1, 0x7c, 0x8f, 0x64, 0x1c, 0x1a},
        {0xf8, 0x78, 0x59, 0x1f, 0x98, 0xfe, 0x22, 0x3e, 0x5f, 0x76, 0xdb, 0xf8, 0x8f, 0xf2, 0x7d, 0x5b, 0x6e, 0x1c, 0x6c, 0xdf, 0x92, 0x02, 0x00, 0x18, 0x75, 0x7e, 0xc1, 0x64, 0xfa, 0x1a, 0xdd, 0x7e},
        {0x4a, 0xb9, 0xaa, 0x32, 0xd2, 0x47, 0x88, 0x0c, 0x8d, 0x31, 0x53, 0xf4, 0x02, 0xc3, 0x2e, 0xaf, 0x19, 0x32, 0x5d, 0xa6, 0x8b, 0x30, 0x5d, 0xbe, 0xfe, 0x4e, 0x9c, 0xda, 0x04, 0x54, 0x41, 0xa4},
        {0x4a, 0x3a, 0xe3, 0xc0, 0x98, 0x7d, 0x6b, 0xcc, 0x15, 0x4c, 0x38, 0x38, 0x17, 0x8f, 0x16, 0x97, 0xe9, 0x41, 0x1a, 0x2e, 0x62, 0x71, 0x47, 0x90, 0x9c, 0x3f, 0xdb, 0x4a, 0x98, 0x6b, 0x9a, 0xee},
        {0x75, 0x82, 0xcb, 0x86, 0xed, 0xff, 0xa0, 0x4a, 0xf8, 0xb3, 0x98, 0x72, 0xef, 0x3c, 0x8e, 0xe5, 0x36, 0xaa, 0x03, 0xf7, 0x54, 0xdb, 0x44, 0x67, 0xc8, 0xe4, 0x9f, 0x2d, 0x50, 0x8f, 0x05, 0xc3},
        {0x86, 0xe9, 0xe5, 0xd5, 0x6b, 0x16, 0x45, 0x9f, 0x93, 0xa5, 0xdd, 0xed, 0x7c, 0x99, 0x53, 0x08, 0x26, 0x44, 0xee, 0xc7, 0x72, 0x9f, 0xaa, 0xa0, 0xba, 0x7b, 0x35, 0x8d, 0xea, 0xf4, 0x30, 0x4e},
        {0x22, 0xed, 0xca, 0x52, 0x49, 0xfb, 0x8f, 0xcd, 0xda, 0x5e, 0x52, 0x20, 0xa6, 0xc7, 0x01, 0x28, 0x02, 0x82, 0x92, 0xf3, 0x70, 0x1d, 0x38, 0x53, 0xca, 0x66, 0x0d, 0xde, 0x20, 0x92, 0x3d, 0x90},
        {0x5b, 0xca, 0xaa, 0xe5, 0x12, 0x31, 0x25, 0x28, 0xc8, 0x6f, 0x77, 0x08, 0x6e, 0xa8, 0x76, 0x20, 0x9d, 0x40, 0xaa, 0x44, 0xed, 0x5d, 0x92, 0x17, 0x27, 0x3b, 0x9f, 0xc9, 0x07, 0xa9, 0xa2, 0x59},
        {0xe4, 0xf0, 0x61, 0x20, 0xf6, 0xc1, 0x44, 0x08, 0x3e, 0xae, 0x33, 0x00, 0x50, 0x06, 0x45, 0x20, 0xce, 0x2f, 0xc4, 0xf3, 0x23, 0x72, 0x56, 0xe4, 0x04, 0x49, 0xc9, 0x2d, 0x03, 0xe0, 0x6b, 0x74},
        {0xdd, 0x8f, 0xf3, 0x5b, 0x2b, 0x4e, 0xb7, 0x53, 0x15, 0xe0, 0x84, 0x53, 0x45, 0xe6, 0xc1, 0x73, 0xa0, 0xa1, 0xbc, 0x7c, 0x83, 0xd3, 0xea, 0x98, 0x87, 0x9a, 0x23, 0xb5, 0x84, 0x7a, 0x48, 0xc1},
        {0xac, 0xdd, 0x8b, 0x04, 0x87, 0x93, 0x3c, 0x57, 0x92, 0x73, 0xb8, 0x04, 0xd7, 0x95, 0x79, 0x77, 0xae, 0x8b, 0x0a, 0x89, 0x2d, 0x58, 0xe0, 0x11, 0xaa, 0xc2, 0xc3, 0xa4, 0x2e, 0xb8, 0x8b, 0x65},
        {0x8d, 0xe0, 0xc6, 0x35, 0x0a, 0x73, 0xfa, 0x62, 0x98, 0x00, 0x42, 0x66, 0x4f, 0x95, 0x3b, 0x11, 0x2a, 0xa1, 0xe8, 0x0b, 0x07, 0xf9, 0x08, 0x1a, 0xad, 0x3b, 0xcb, 0xbe, 0x83, 0x83, 0x40, 0xdb},
    }},
    {{
        {0x30, 0x81, 0xcd, 0x27, 0x7b, 0xcd, 0x1e, 0x37, 0x63, 0xea, 0x0b, 0xf5, 0xee, 0x59, 0x74, 0xc3, 0x79, 0x0f, 0x2b, 0x56, 0xed, 0x73, 0x2a, 0x1a, 0x11, 0x31, 0xbe, 0x17, 0x7d, 0xea, 0x42, 0x61},
        {0xb6, 0xad, 0x22, 0xd8, 0xcd, 0x60, 0x3c, 0xef, 0xae, 0x8a, 0x37, 0x1a, 0x40, 0xd3, 0x43, 0xd9, 0x70, 0x69, 0x31, 0x63, 0x9d, 0x1a, 0x1b, 0x79, 0x8c, 0x2b, 0xa5, 0x6e, 0xf1, 0xc1, 0xe7, 0x0f},
        {0xcc, 0x39, 0x54, 0x79, 0x01, 0x59, 0x68, 0x96, 0xaf, 0xd3, 0x5f, 0x8c, 0xef, 0x00, 0x1c, 0x55, 0xaf, 0x0a, 0xad, 0x9f, 0x32, 0x10, 0xb6, 0xe6, 0xbe, 0x3b, 0x13, 0x88, 0x4f, 0xfa, 0xf4, 0x87},
        {0xe5, 0x86, 0x43, 0xfd, 0xe4, 0xdf, 0x2b, 0x6b, 0x4b, 0x0c, 0x74, 0xe7, 0xa4, 0x0c, 0x68, 0xb2, 0xe6, 0xf4, 0xe8, 0xa8, 0xd4, 0xe4, 0x5e, 0x4e, 0x6a, 0xdf, 0x4d, 0xc6, 0x25, 0x25, 0xb9, 0x41},
        {0xd2, 0xd0, 0xc0, 0xc2, 0x36, 0x0f, 0xeb, 0xa9, 0x7d, 0x03, 0x9f, 0x4e, 0xd9, 0x0f, 0xf7, 0xfc, 0xd3, 0x82, 0x80, 0x18, 0x07, 0x66, 0xde, 0x56, 0x6d, 0xb9, 0x93, 0x90, 0x48, 0x9c, 0x2a, 0xd1},
        {0x1c, 0x35, 0xfe, 0x90, 0x2a, 0x3a, 0x15, 0x39, 0x57, 0x39, 0x8a, 0x77, 0x8e, 0x36, 0x7d, 0x8b, 0xca, 0x87, 0x7f, 0x25, 0xcd, 0xe1, 0xa1, 0x73, 0xa0, 0x58, 0x32, 0xe3, 0xe8, 0xc4, 0x18, 0x32},
        {0x20, 0x98, 0xdd, 0x0b, 0x0a, 0xa2, 0xc8, 0x32, 0x5d, 0x9b, 0x42, 0x45, 0xd3, 0xad, 0x3f, 0xce, 0xac, 0x12, 0x0a, 0xae, 0x61, 0xf3, 0xab, 0xdd, 0xc1, 0xab, 0x99, 0x3e, 0x29, 0x6f, 0x81, 0x0c},
        {0xc8, 0x94, 0x23, 0xae, 0xc2, 0x36, 0xeb, 0x9c, 0x9f, 0xad, 0xa9, 0xd9, 0x4c, 0x00, 0x96, 0x17, 0x85, 0x71, 0x9a, 0x5e, 0xe4, 0x82, 0x31, 0x83, 0x25, 0x29, 0xa8, 0xbd, 0x0c, 0x46, 0x29, 0xb1},
        {0x12, 0x31, 0xeb, 0x50, 0xd0, 0x07, 0x00, 0xcc, 0x4f, 0xaa, 0xa9, 0x15, 0x03, 0xaa, 0x3f, 0x02, 0xfe, 0xdd, 0xef, 0x29, 0x1a, 0x5f, 0xde, 0xaa, 0x3f, 0x76, 0x76, 0x17, 0x33, 0x30, 0x5f, 0xa6},
        {0x0d, 0xfe, 0xcf, 0x93, 0xdd, 0xf9, 0xcf, 0x5f, 0x92, 0x53, 0x66, 0x4a, 0x91, 0xf9, 0x59, 0x48, 0x7f, 0x44, 0x24, 0x7b, 0x65, 0x1b, 0xfa, 0xd1, 0x5a, 0x6d, 0x8c, 0xc6, 0x69, 0x5d, 0xd3, 0x60},
        {0x77, 0x98, 0x1f, 0x6a, 0xaa, 0x61, 0xd0, 0x35, 0x38, 0x32, 0xb6, 0x7f, 0xa9, 0xcb, 0xef, 0x37, 0xac, 0x5b, 0xfb, 0xe1, 0xc9, 0x40, 0x01, 0x30, 0x93, 0x2d, 0x8d, 0xf6, 0xfa, 0x70, 0x5e, 0x96},
        {0x4a, 0xc0, 0x8f, 0x47, 0xe0, 0xa1, 0x5f, 0x72, 0xd8, 0x93, 0xe9, 0x0d, 0x71, 0x58, 0x06, 0x3a, 0x0f, 0x31, 0x94, 0x61, 0xc6, 0x71, 0x95, 0x51, 0x55, 0x5c, 0x18, 0xa7, 0xaf, 0x2c, 0x46, 0x31},
        {0xe3, 0x9a, 0x48, 0x3e, 0x03, 0x3b, 0x17, 0x4c, 0xdb, 0xa8, 0xfe, 0x41, 0xaa, 0xf0, 0xf8, 0x7b, 0xa3, 0xbd, 0xd5, 0x40, 0x65, 0xcc, 0x40, 0x11, 0x30, 0x90, 0x58, 0xb6, 0x9f, 0xbc, 0x1e, 0x87},
        {0x2d, 0xe8, 0x5f, 0xe5, 0x2e, 0xd3, 0x48, 0xa9, 0xf5, 0x7b, 0xb6, 0xe8, 0x5f, 0x8b, 0x4e, 0x93, 0x6c, 0x80, 0xfa, 0x9c, 0x09, 0x4c, 0xba, 0x8d, 0x39, 0xdc, 0xe2, 0x3b, 0xa6, 0x60, 0xfc, 0xbc},
        {0xb0, 0x58, 0x3a, 0xc1, 0x9e, 0x8b, 0x72, 0x68, 0x6b, 0xf0, 0xc4, 0x80, 0x34, 0x7b, 0x8a, 0x13, 0x74, 0xa1, 0x84, 0xe1, 0x7d, 0xed, 0x3e, 0x6c, 0x44, 0x31, 0xdc, 0x57, 0xe2, 0x51, 0x20, 0xeb},
    }},
}};


const uint32_t aes_ctr_counter = 42;
const uint32_t aes_ctr_tweak = 0xbeef;
const std::array<uint8_t, 16> aes_ctr_iv = {
    {0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12, 0xe6, 0x5b, 0x13, 0x64, 0xf5, 0xd9, 0x6a, 0x99, 0x2a, 0x7a}
};
const std::array<std::array<std::array<uint8_t, 16>, num_ctr_blocks>, num_keys> aes128_ctr_outputs = {{
    {0xa0, 0x1d, 0x8a, 0xe2, 0xb6, 0x90, 0xdb, 0xe8, 0xdc, 0x57, 0x33, 0xdf, 0xac, 0xd3, 0x5d, 0xc4, 0x55, 0xc9, 0x33, 0x7e, 0xe8, 0x12, 0x87, 0x3c, 0x47, 0x0a, 0x06, 0x59, 0x88, 0xdd, 0xb7, 0xdf, 0x17, 0xb8, 0xa4, 0xfa, 0x29, 0x1a, 0x4d, 0xeb, 0x30, 0x9d, 0x45, 0x04, 0x95, 0x77, 0x4a, 0x76, 0x47, 0x1e, 0x83, 0x04, 0x43, 0xda, 0xa8, 0xb7, 0x04, 0x09, 0x86, 0x3f, 0xad, 0xd7, 0xcd, 0xd4, 0xff, 0x82, 0x66, 0x62, 0xcb, 0xa9, 0x55, 0x80, 0xfd, 0x43, 0x8b, 0x96, 0x06, 0xea, 0x49, 0x95, 0xa8, 0x32, 0xdf, 0xe6, 0x9e, 0x3d, 0x31, 0x8c, 0x7a, 0x74, 0x12, 0x8f, 0xd0, 0x9d, 0x64, 0xf7, 0x0b, 0xf0, 0xd7, 0xa0, 0xe0, 0xd5, 0xd2, 0x65, 0xfd, 0x71, 0x06, 0xbe, 0xb9, 0x2b, 0xa2, 0xd4, 0x01, 0xec, 0xdd, 0x28, 0x68, 0x59, 0xd0, 0xc6, 0xfa, 0xd0, 0x5e, 0xcf, 0x34, 0x0f, 0x42, 0x32, 0xe1, 0x6f, 0x6c, 0xed, 0x60, 0xd5, 0xe0, 0x6b, 0x1d, 0xfe, 0x10, 0x25, 0xad, 0x87, 0xb9, 0xa5, 0x79, 0x6a, 0x4c, 0xfa, 0x78, 0x2c, 0xc1, 0xfc, 0xa5, 0x57, 0xc1, 0x00, 0x12, 0x95, 0x2d, 0x98, 0x3f, 0xff, 0x5f, 0xb9, 0x11, 0x33, 0xfb, 0xcb, 0x00, 0xaf, 0x98, 0x3f, 0xc4, 0xc9, 0x4e, 0x29, 0xda, 0xe7, 0x9a, 0x69, 0x7a, 0x42, 0xf1, 0xb9, 0xd3, 0xbf, 0x60, 0x8e, 0xd6, 0xc8, 0xe7, 0xdd, 0xba, 0xdf, 0xb0, 0x4a, 0xc5, 0x4a, 0x4d, 0xbf, 0xcd, 0x92, 0xa0, 0x8e, 0x2a, 0xea, 0xf4, 0x66, 0xb3, 0x7b, 0x47, 0x94, 0x5e, 0xab, 0xe6, 0xd2, 0x24, 0x4d, 0xc6, 0xac, 0xe2, 0xad, 0x7c, 0x0e, 0xb1, 0x99, 0x8c, 0x56, 0xc2, 0x75, 0x0e, 0x44, 0x57, 0x9f, 0xc7, 0x11, 0xb7, 0x67, 0x28, 0x24},
    {0xbb, 0xf0, 0x46, 0xd7, 0xac, 0x72, 0x52, 0xee, 0x67, 0x24, 0xaf, 0xdf, 0x5f, 0xf7, 0x49, 0xd7, 0xa1, 0xd8, 0xcd, 0xd8, 0xa2, 0xce, 0x81, 0xb4, 0x98, 0xa0, 0x82, 0x74, 0xab, 0xad, 0x16, 0xe4, 0x7b, 0xf1, 0x9f, 0x4a, 0xb5, 0x68, 0xc3, 0xba, 0x0a, 0x69, 0xda, 0x2e, 0x06, 0x84, 0xec, 0xb7, 0xc5, 0x65, 0x6c, 0x8b, 0x18, 0xe9, 0x9e, 0x34, 0xe2, 0x4c, 0x12, 0xe0, 0x25, 0xd1, 0xae, 0x2e, 0x69, 0xd5, 0x8f, 0x56, 0xed, 0x8f, 0x6f, 0x75, 0xfe, 0x20, 0x26, 0x91, 0xf1, 0x15, 0x34, 0x9e, 0xaf, 0x08, 0x06, 0x77, 0x91, 0xab, 0x21, 0xcc, 0x4a, 0x22, 0xd8, 0x3f, 0x96, 0x36, 0xde, 0x40, 0x4b, 0x58, 0x21, 0x72, 0xcd, 0xc6, 0x5e, 0x05, 0x66, 0xa9, 0xcd, 0x08, 0x55, 0x76, 0xb4, 0xb5, 0xbf, 0x85, 0x53, 0x07, 0x30, 0x7d, 0x08, 0xf4, 0x81, 0xb5, 0xd1, 0xbb, 0xc9, 0x0d, 0xeb, 0x03, 0xfe, 0xd0, 0x57, 0xd7, 0x0f, 0xec, 0x1e, 0x99, 0xa1, 0xd6, 0xbc, 0x29, 0x77, 0x4f, 0x4c, 0x9a, 0x70, 0x1b, 0x6b, 0x61, 0x8b, 0x60, 0x63, 0x14, 0xd9, 0x99, 0xd7, 0x93, 0x61, 0x1e, 0xd8, 0xf1, 0xdb, 0xda, 0x6a, 0x3e, 0x43, 0x2c, 0xb7, 0x3c, 0x47, 0x38, 0x19, 0xd9, 0x56, 0xc0, 0x07, 0x21, 0x9d, 0xc3, 0x60, 0xd4, 0x35, 0xd8, 0x34, 0x7a, 0x85, 0x43, 0x6d, 0x57, 0x21, 0x36, 0xf0, 0x93, 0x33, 0xec, 0xab, 0xc9, 0x11, 0xfe, 0x3b, 0x77, 0xa2, 0x96, 0xfe, 0xb0, 0x10, 0xf8, 0x1c, 0xd2, 0x28, 0xb7, 0x19, 0xaa, 0xd9, 0xa9, 0xb5, 0x19, 0x03, 0xb8, 0xff, 0x76, 0x27, 0xc8, 0x70, 0x5a, 0x6d, 0xc0, 0xe0, 0x17, 0xd2, 0x05, 0xb2, 0x8b, 0x03, 0x10, 0x78, 0x1d, 0xbc, 0x61, 0x37, 0xec},
    {0x38, 0x64, 0x80, 0x74, 0xe7, 0xcf, 0x79, 0xb7, 0x8d, 0x78, 0xee, 0x5b, 0x1b, 0x49, 0xf2, 0xc4, 0x83, 0xbf, 0xff, 0x4f, 0x33, 0x31, 0x6d, 0xe4, 0x21, 0x1d, 0x64, 0xa4, 0x51, 0x24, 0xd5, 0x8f, 0xe3, 0x96, 0x5e, 0xfe, 0x68, 0xd8, 0xb2, 0xe5, 0x67, 0xda, 0x0e, 0x10, 0xd6, 0x7d, 0xc9, 0xf9, 0x7a, 0x10, 0x96, 0x20, 0x5d, 0x42, 0x69, 0x92, 0x72, 0xe1, 0x29, 0xc1, 0x5c, 0x00, 0x22, 0xc4, 0x23, 0x08, 0x81, 0x0a, 0x73, 0xae, 0x48, 0x49, 0xd1, 0x2c, 0xc8, 0x3a, 0x36, 0x79, 0x8b, 0xcb, 0xaa, 0x65, 0x75, 0x06, 0x18, 0xed, 0xe9, 0x79, 0x77, 0xb3, 0xa3, 0x28, 0xd6, 0x29, 0x92, 0x73, 0x97, 0x17, 0x49, 0x6f, 0x04, 0xc2, 0xa3, 0x56, 0x79, 0xd4, 0x28, 0x0b, 0xc1, 0xaa, 0xea, 0xcf, 0x3e, 0x1b, 0x1b, 0x1b, 0xf7, 0xb2, 0x17, 0x15, 0xba, 0xa2, 0x99, 0xbe, 0x36, 0x4d, 0x2a, 0x11, 0x5f, 0x26, 0xce, 0x81, 0xe8, 0xd2, 0x97, 0xc3, 0x5b, 0x3b, 0x4b, 0xd6, 0x6f, 0xce, 0x86, 0x5e, 0xeb, 0x41, 0x48, 0x16, 0xe0, 0x6d, 0x5b, 0x05, 0x2c, 0x01, 0x4f, 0x87, 0xc7, 0x8f, 0xfc, 0x78, 0xc9, 0xb6, 0x6f, 0xbb, 0x3a, 0x7d, 0x67, 0xac, 0xc3, 0x40, 0x04, 0x15, 0x05, 0xfe, 0x16, 0x94, 0x18, 0xc7, 0x5e, 0x85, 0x82, 0xe4, 0x4a, 0x08, 0x29, 0xf0, 0x71, 0xb8, 0x04, 0xbe, 0x3e, 0x02, 0x4b, 0x4c, 0xeb, 0xc3, 0x69, 0x01, 0x77, 0x37, 0xe1, 0x28, 0xdd, 0x29, 0x39, 0xf6, 0x23, 0x88, 0xa4, 0x1e, 0xe6, 0x00, 0xb7, 0x6a, 0xa3, 0x79, 0x15, 0xd1, 0x59, 0x8e, 0xd0, 0x4d, 0x76, 0x84, 0x85, 0x9b, 0x5f, 0xa1, 0xc7, 0xdb, 0xa6, 0x38, 0xe2, 0xa6, 0x2f, 0xaa, 0x60, 0x6b, 0xe2, 0xc1},
}};
const std::array<std::array<std::array<uint8_t, 16>, num_ctr_blocks>, num_keys> aes192_ctr_outputs = {{
    {0x1e, 0xb0, 0x66, 0x39, 0x5a, 0xc0, 0xa0, 0xf3, 0x49, 0xb8, 0x35, 0x3e, 0x0c, 0xb8, 0xb6, 0x36, 0x3c, 0x1b, 0xb2, 0x5c, 0x18, 0x5c, 0xd4, 0x7a, 0xdd, 0x45, 0xe3, 0x32, 0xd0, 0x21, 0x15, 0xd6, 0xb6, 0xf8, 0x5c, 0xe2, 0xfb, 0xac, 0x59, 0x7e, 0xf0, 0x41, 0x75, 0xc7, 0xf0, 0x18, 0x0b, 0xb3, 0x6f, 0x8a, 0xc9, 0xe8, 0xf8, 0xb5, 0x02, 0x15, 0x22, 0x0d, 0xc6, 0xa0, 0x7a, 0xaf, 0x05, 0x91, 0xa0, 0xa2, 0xf2, 0xf3, 0xe2, 0x6d, 0xcb, 0x5c, 0xda, 0x7d, 0xf3, 0xb8, 0x82, 0x33, 0xba, 0xee, 0xf3, 0xa3, 0xec, 0xbb, 0xbd, 0x0b, 0xb7, 0x15, 0xee, 0x16, 0x3b, 0x48, 0x7f, 0xda, 0xd5, 0x72, 0x98, 0xb8, 0xbe, 0x18, 0xc3, 0x44, 0x31, 0x8e, 0x4b, 0x75, 0x0a, 0xab, 0x68, 0x73, 0x91, 0x6c, 0x97, 0x4f, 0x53, 0xd1, 0x28, 0x05, 0x73, 0x2c, 0xa2, 0x4a, 0x39, 0x27, 0xf9, 0x82, 0x17, 0x62, 0xb7, 0x52, 0x28, 0xbd, 0x11, 0xb2, 0xaa, 0x07, 0xac, 0x4e, 0xd7, 0x2a, 0xed, 0xa9, 0x9e, 0x3b, 0x5a, 0xad, 0x16, 0xa0, 0x4f, 0xb1, 0x03, 0x39, 0xc3, 0x7e, 0x65, 0xe8, 0x8f, 0x14, 0xe6, 0x65, 0xc6, 0x5f, 0x8c, 0x28, 0xbf, 0x16, 0x79, 0xea, 0x66, 0xbc, 0x81, 0xf8, 0x7a, 0x95, 0x3d, 0xce, 0x9f, 0x28, 0x78, 0x3a, 0xfa, 0x33, 0x4a, 0x09, 0xee, 0x01, 0x26, 0x66, 0xc0, 0x4a, 0x72, 0xdf, 0x0a, 0x20, 0x83, 0x57, 0xb5, 0x21, 0xfe, 0xe3, 0x75, 0xcc, 0x57, 0x01, 0x0e, 0x10, 0x09, 0xff, 0xd3, 0xc6, 0x27, 0x28, 0xe9, 0x7f, 0x25, 0xdd, 0x10, 0xec, 0xcd, 0xa4, 0x6e, 0x95, 0x6c, 0x52, 0x38, 0x11, 0xa1, 0x24, 0xf2, 0x18, 0xee, 0xaf, 0x14, 0x42, 0x43, 0x06, 0xcf, 0x1e, 0xd6, 0x90},
    {0xdd, 0x58, 0x74, 0x59, 0x41, 0xe5, 0xb7, 0x2a, 0xe8, 0x8f, 0x19, 0xd6, 0x46, 0x8c, 0x26, 0xff, 0x37, 0x5a, 0xcb, 0x10, 0x11, 0x10, 0xd7, 0xe9, 0xeb, 0x19, 0x08, 0x4f, 0x74, 0x9c, 0x23, 0x78, 0xe4, 0x76, 0xe3, 0x4d, 0x23, 0xc9, 0x3c, 0xf3, 0xe6, 0xc7, 0x53, 0x62, 0x73, 0xc9, 0x1d, 0xc4, 0xe8, 0x05, 0x32, 0xe3, 0x00, 0x49, 0x2d, 0x56, 0x74, 0x9e, 0x95, 0xce, 0x92, 0xb9, 0x6a, 0xe4, 0x75, 0x89, 0x6b, 0x89, 0x52, 0x04, 0x0a, 0x6f, 0x42, 0x7f, 0x11, 0x96, 0xfb, 0xac, 0x8f, 0x81, 0x79, 0xee, 0xd2, 0xe9, 0xf0, 0x8a, 0x7d, 0xb5, 0xa1, 0x19, 0xcc, 0xa7, 0x55, 0x4b, 0x09, 0x73, 0x12, 0x8f, 0x15, 0xe4, 0x9a, 0x23, 0xfb, 0x78, 0x7f, 0x11, 0xa6, 0xb8, 0xe5, 0x1f, 0x1c, 0x15, 0x68, 0x54, 0x16, 0x1e, 0x78, 0xd9, 0x44, 0x5f, 0x9b, 0x37, 0x12, 0x0e, 0x7e, 0x98, 0x1b, 0xb9, 0x20, 0xe1, 0x19, 0xe6, 0x33, 0xcb, 0xe8, 0xf3, 0x93, 0x26, 0xbe, 0x86, 0x5b, 0x4f, 0x4d, 0xc0, 0x88, 0x0d, 0xcf, 0xff, 0x3b, 0x4b, 0xea, 0x41, 0xc0, 0xbd, 0x35, 0x41, 0xa3, 0xde, 0xf2, 0x87, 0x5d, 0x2d, 0xa9, 0xb5, 0xb6, 0x83, 0x69, 0x04, 0x8a, 0x2b, 0x9e, 0x71, 0x29, 0x95, 0xd8, 0x8c, 0x5d, 0x22, 0x9c, 0xdc, 0xfb, 0xd4, 0x7d, 0x3a, 0x86, 0x72, 0xcc, 0x5e, 0xfa, 0x19, 0xff, 0x9b, 0xea, 0xae, 0xc2, 0xba, 0xfb, 0x37, 0xe2, 0xcc, 0x89, 0x8d, 0x74, 0x6a, 0x5c, 0xb1, 0x59, 0x7a, 0xff, 0x2d, 0xf5, 0x08, 0x1e, 0x2b, 0x30, 0x0e, 0x81, 0x3d, 0x58, 0x57, 0x23, 0xa2, 0x64, 0xba, 0x51, 0x73, 0x20, 0xcf, 0xf3, 0x59, 0xd2, 0xeb, 0x28, 0x54, 0xa2, 0xf1, 0x59, 0x41, 0x2e, 0xc0},
    {0xb3, 0xa5, 0x40, 0x00, 0xe3, 0x69, 0xd6, 0xb9, 0xb5, 0xab, 0x88, 0x98, 0x15, 0x96, 0xc0, 0x80, 0xff, 0x34, 0x5e, 0x9a, 0x08, 0xdb, 0x16, 0x71, 0x73, 0x98, 0x79, 0xcc, 0x74, 0x05, 0x63, 0x58, 0x21, 0xe7, 0xfc, 0x6c, 0x48, 0xc6, 0x5a, 0x83, 0x29, 0x1e, 0x78, 0x6f, 0x9a, 0xb2, 0x0e, 0x51, 0x1f, 0x30, 0xda, 0x76, 0xca, 0xe9, 0xf6, 0x40, 0x07, 0x51, 0x3f, 0xaf, 0x31, 0x5f, 0x8e, 0x93, 0xf4, 0xe5, 0x0a, 0xa4, 0x8e, 0x38, 0xce, 0x05, 0xfc, 0xc2, 0x0a, 0x65, 0xce, 0x8d, 0x5b, 0x4d, 0x0f, 0x88, 0xf1, 0xf2, 0x54, 0x71, 0x0f, 0x3a, 0x85, 0xf1, 0xe0, 0xc0, 0x89, 0x76, 0x97, 0xcd, 0x53, 0x24, 0xec, 0x3c, 0xb2, 0xa6, 0x91, 0x46, 0xdf, 0x0e, 0x8d, 0xd7, 0x66, 0xd1, 0xef, 0x35, 0x25, 0xaf, 0x40, 0x9d, 0x2d, 0xae, 0x6c, 0xc7, 0x2e, 0x9a, 0x56, 0x63, 0x73, 0xc1, 0x80, 0xe9, 0xdb, 0x85, 0xbe, 0x12, 0x47, 0xda, 0x5e, 0x9b, 0xc5, 0x5e, 0xd7, 0xaf, 0x6a, 0x3c, 0x4d, 0xbe, 0xfe, 0x5a, 0x54, 0x04, 0x41, 0xd5, 0xd4, 0x7e, 0x77, 0xa3, 0xfd, 0xc0, 0x32, 0xaf, 0xc9, 0x86, 0xe2, 0x86, 0x83, 0xcc, 0x5f, 0xb2, 0xef, 0x4a, 0xbf, 0x71, 0x52, 0x39, 0x11, 0xcd, 0x23, 0x63, 0x2d, 0xed, 0xfd, 0x4d, 0x70, 0xa4, 0x11, 0xee, 0x8d, 0xb6, 0x97, 0x2d, 0x91, 0x05, 0x24, 0x2c, 0x04, 0x0d, 0x67, 0x74, 0x8c, 0x96, 0xfa, 0x03, 0x3b, 0x8d, 0xb2, 0xf2, 0x62, 0x7b, 0x24, 0xd3, 0x08, 0x65, 0x1e, 0x98, 0xc7, 0x26, 0x91, 0x75, 0xe5, 0x80, 0xf6, 0xd5, 0xa5, 0x98, 0xa1, 0x1a, 0x32, 0x68, 0xfd, 0x07, 0xa2, 0x4f, 0x59, 0xdb, 0xb3, 0x5d, 0x37, 0x1b, 0xb9, 0x1b, 0x75, 0xd9},
}};
const std::array<std::array<std::array<uint8_t, 16>, num_ctr_blocks>, num_keys> aes256_ctr_outputs = {{
    {0x1a, 0x29, 0x98, 0x31, 0x2a, 0x41, 0x76, 0x0a, 0xe9, 0x1d, 0x26, 0x05, 0xa0, 0x7b, 0xfe, 0xbe, 0x87, 0xbc, 0x19, 0x12, 0xda, 0x11, 0x43, 0x26, 0x92, 0x49, 0x90, 0x44, 0x86, 0xcd, 0x25, 0x9f, 0x06, 0x69, 0x1e, 0xdf, 0x3a, 0xa5, 0xa9, 0x86, 0xae, 0xce, 0x12, 0xba, 0x35, 0xaf, 0xd0, 0xdd, 0x8a, 0x90, 0x88, 0x35, 0x6e, 0x0e, 0xf3, 0x91, 0xd5, 0x4c, 0x91, 0xfd, 0xcc, 0x3c, 0x02, 0x6c, 0xd8, 0x4a, 0x5c, 0xad, 0xf3, 0xa4, 0xdf, 0xbf, 0x6e, 0x72, 0x76, 0x03, 0x24, 0xa7, 0x23, 0xf2, 0x12, 0xfa, 0xd3, 0x3a, 0xd9, 0xf3, 0x1b, 0x6d, 0xa4, 0xb9, 0x1b, 0xea, 0x2d, 0x75, 0xe5, 0xcc, 0x43, 0x4d, 0x26, 0x6e, 0x15, 0x66, 0xc7, 0xbc, 0x1c, 0xd0, 0xf1, 0xa6, 0x65, 0xbb, 0x1c, 0x58, 0x5b, 0xfb, 0xd8, 0x64, 0x3d, 0x93, 0x45, 0xa6, 0x84, 0x4f, 0x52, 0x56, 0x72, 0xee, 0xed, 0x61, 0x60, 0x58, 0xd2, 0x33, 0x69, 0xc6, 0x20, 0x92, 0xe4, 0x6d, 0x92, 0xd5, 0xdf, 0x3f, 0x24, 0xfe, 0xbc, 0xf1, 0x39, 0xb8, 0xc0, 0xec, 0x45, 0xfe, 0x54, 0xa9, 0x18, 0xa2, 0xc1, 0xe2, 0xd9, 0x52, 0x1d, 0xae, 0x9c, 0x9d, 0x58, 0x9c, 0xf6, 0xaa, 0x56, 0x31, 0xb2, 0x6d, 0x3b, 0x70, 0x7d, 0x58, 0xc1, 0x02, 0x0b, 0x60, 0xe8, 0x9c, 0xf6, 0x25, 0xae, 0xe5, 0xd3, 0x57, 0x0a, 0x3d, 0xa5, 0x1c, 0xb2, 0xd8, 0x31, 0x9b, 0xe7, 0xe2, 0x8d, 0xcd, 0x64, 0xb0, 0x97, 0x26, 0x91, 0xd1, 0x27, 0x35, 0x6c, 0x42, 0x73, 0x31, 0x03, 0xd9, 0x6b, 0x85, 0xa5, 0xd8, 0xe3, 0xd0, 0x0f, 0x6f, 0xdd, 0xa9, 0x9c, 0x86, 0xb0, 0x23, 0x00, 0xcb, 0x53, 0xfd, 0x46, 0x04, 0x71, 0xdb, 0xa3, 0x72, 0xac, 0x89},
    {0x38, 0x62, 0x80, 0x94, 0x74, 0xe0, 0x90, 0xcb, 0xdb, 0x8f, 0x00, 0xf6, 0xc4, 0xb4, 0xd0, 0x6f, 0x8a, 0xbd, 0x5b, 0xbe, 0x8d, 0x6d, 0x49, 0x8b, 0x1c, 0x62, 0xcd, 0xff, 0x42, 0xde, 0xb5, 0x3a, 0xd1, 0xa8, 0x21, 0xc6, 0x8f, 0x6c, 0xfb, 0xb1, 0xaf, 0xe9, 0xa9, 0x05, 0x1d, 0x0b, 0x46, 0x71, 0x8d, 0x69, 0xd1, 0x78, 0x2a, 0xe6, 0x31, 0x18, 0xc3, 0xa4, 0x44, 0xf9, 0x35, 0x12, 0x88, 0x03, 0x74, 0xcf, 0x5b, 0x9b, 0x3a, 0x76, 0x06, 0x29, 0x36, 0x47, 0xb5, 0x65, 0x04, 0xa3, 0x51, 0xa5, 0x5c, 0x0d, 0x00, 0x46, 0xd0, 0x0c, 0x3a, 0x05, 0xb8, 0x94, 0x3d, 0xf4, 0x57, 0xc1, 0xaa, 0xf5, 0xcb, 0x8e, 0xcb, 0xb5, 0x39, 0xb2, 0x9d, 0xd5, 0x9b, 0x9b, 0x0a, 0xdc, 0xcd, 0x1e, 0x4f, 0xa3, 0xb2, 0x95, 0xe4, 0x9d, 0x4d, 0xe0, 0x74, 0x82, 0x46, 0x9c, 0xff, 0xef, 0x77, 0x57, 0x77, 0xd6, 0xcc, 0xa2, 0x31, 0x29, 0x59, 0x23, 0x2c, 0xf8, 0x6f, 0xd5, 0xee, 0x2e, 0xa4, 0x9b, 0x7b, 0xfe, 0xae, 0x5d, 0xe9, 0x78, 0x1d, 0x13, 0x7a, 0xda, 0x02, 0x90, 0x48, 0x66, 0x07, 0x23, 0xd4, 0xd3, 0x1d, 0x01, 0x66, 0xf7, 0xa5, 0xcb, 0xe0, 0x1c, 0xc1, 0x52, 0x15, 0x0a, 0xf7, 0xf1, 0x76, 0xa5, 0x55, 0xff, 0x6f, 0x34, 0xdb, 0xb9, 0xdf, 0xe3, 0xc3, 0x6a, 0x34, 0xe9, 0xd6, 0xf2, 0xca, 0xdb, 0xe4, 0x59, 0x45, 0x8b, 0x26, 0xf0, 0xb2, 0xb6, 0xaf, 0x0e, 0x21, 0xce, 0xb9, 0x42, 0xd5, 0x33, 0x9e, 0xd9, 0x2b, 0x07, 0xe9, 0x9c, 0x25, 0xf4, 0xed, 0xcf, 0x51, 0x2d, 0x6b, 0xc5, 0xe1, 0x5d, 0x95, 0x1e, 0x49, 0x81, 0x5a, 0x80, 0xcb, 0x4f, 0x96, 0x36, 0x14, 0x94, 0x24, 0xa4, 0x5a, 0xf7},
    {0xb6, 0xf2, 0x5c, 0x04, 0x5e, 0x71, 0xbe, 0xbd, 0x1a, 0xc3, 0x5f, 0x78, 0xfb, 0x35, 0x14, 0xc1, 0xff, 0x6b, 0xe6, 0xba, 0x94, 0x8e, 0xd2, 0x2e, 0xd3, 0x2d, 0xe4, 0x2f, 0x3a, 0x7a, 0xe3, 0xbc, 0xa4, 0xb6, 0x81, 0x67, 0xb5, 0xea, 0x81, 0xb0, 0xc8, 0x92, 0xba, 0x40, 0xc5, 0x81, 0x64, 0xb7, 0xfe, 0x94, 0x3a, 0x0c, 0xa1, 0xb0, 0x05, 0xf3, 0x39, 0xab, 0xe3, 0x16, 0x44, 0x5f, 0x64, 0xe9, 0xeb, 0xe7, 0x0a, 0x46, 0xc0, 0x10, 0x02, 0x9c, 0xb5, 0x9e, 0x7f, 0x29, 0x04, 0xd9, 0xa2, 0x3c, 0xff, 0xe3, 0x6a, 0xf4, 0x82, 0x01, 0x15, 0x19, 0x8b, 0x72, 0x38, 0x8c, 0xee, 0x11, 0x3b, 0x7a, 0x03, 0x7a, 0x72, 0x29, 0x09, 0x70, 0x0e, 0xa3, 0x9d, 0xc6, 0xfc, 0xd9, 0x20, 0x91, 0x6e, 0xdb, 0xb3, 0x80, 0x5a, 0x05, 0x41, 0x6f, 0x0b, 0x49, 0x29, 0x72, 0x8a, 0x54, 0x99, 0xc3, 0x59, 0x4f, 0x3d, 0x2c, 0xf4, 0xc3, 0x33, 0x71, 0xf0, 0xef, 0xcf, 0xad, 0x63, 0x1f, 0x84, 0xc8, 0x7f, 0x00, 0x5b, 0xfb, 0x45, 0x7a, 0x04, 0xd3, 0x67, 0x42, 0xdb, 0xd9, 0x35, 0x1c, 0xe2, 0x63, 0x3a, 0xd0, 0xc9, 0x08, 0xdc, 0x77, 0x7a, 0xbd, 0x22, 0x17, 0xf1, 0xb4, 0xdd, 0xf3, 0x78, 0x25, 0xaf, 0x97, 0x5d, 0x6c, 0xa5, 0xf2, 0x71, 0x6f, 0x4b, 0xb5, 0x06, 0xa6, 0x02, 0x70, 0x63, 0x91, 0x9b, 0x1b, 0xe3, 0x3f, 0x1d, 0x83, 0xba, 0x26, 0x9d, 0x36, 0x67, 0xe9, 0x23, 0xb1, 0x49, 0xd0, 0x02, 0x4b, 0x7e, 0x28, 0x9a, 0xfe, 0xc7, 0x0f, 0x2b, 0x7c, 0xc4, 0x24, 0x86, 0x01, 0x16, 0x1d, 0xad, 0x64, 0x9d, 0x53, 0x5a, 0xaa, 0x74, 0xdc, 0x6d, 0x84, 0x7f, 0x6d, 0xea, 0x49, 0x39, 0xc5, 0x08, 0xb3},
}};

const std::array<uint8_t, 24> rijndael192_input = {
    0x54, 0x40, 0xaa, 0x9d, 0xc3, 0xa0, 0x15, 0x45, 0xcd, 0xf6, 0x53, 0x23, 0x56, 0x54, 0x7a, 0x92,
    0x0a, 0x27, 0x5f, 0x70, 0xdb, 0x3a, 0xbf, 0xca
};
const std::array<std::array<uint8_t, 24>, num_keys> expected_rijndael192_outputs = {{
    {0x0e, 0xa6, 0xb9, 0x8f, 0xa2, 0x54, 0xd3, 0x1c, 0x9c, 0x11, 0x59, 0xac, 0x02, 0x3b, 0x28, 0x9e, 0xba, 0x45, 0xa9, 0x50, 0xd2, 0x5b, 0x76, 0x92},
    {0x0d, 0xf9, 0xac, 0xee, 0x1c, 0xc3, 0x23, 0x2a, 0x9f, 0x14, 0xfb, 0x04, 0x89, 0x17, 0x04, 0xb6, 0xee, 0x1f, 0x41, 0x34, 0xee, 0x59, 0x94, 0x13},
    {0x6a, 0xcf, 0x7d, 0xb6, 0x6d, 0x75, 0x6c, 0xbd, 0x6f, 0x68, 0x4a, 0x2a, 0x8b, 0xd1, 0x19, 0x04, 0x71, 0xd5, 0xec, 0x6d, 0x2b, 0x7b, 0x64, 0x92},
}};

// clang-format on

TEMPLATE_TEST_CASE("aes keygen", "[aes]", secpar128_t, secpar192_t, secpar256_t)
{
    constexpr auto S = TestType::value;

    const auto& [aes_keys, expected_aes_round_keys] = [] -> auto
    {
        if constexpr (S == secpar::s128)
        {
            return std::make_pair(keys_128, expected_aes128_round_keys);
        }
        else if constexpr (S == secpar::s192)
        {
            return std::make_pair(keys_192, expected_aes192_round_keys);
        }
        else if constexpr (S == secpar::s256)
        {
            return std::make_pair(keys_256, expected_aes256_round_keys);
        }
    }();

    aes_round_keys<S> round_keys{};
    std::array<std::array<uint8_t, 16>, AES_ROUNDS<S> + 1> round_key_bytes = {0};
    block_secpar<S> key;

    for (size_t i = 0; i < num_keys; ++i)
    {
        memcpy(&key, aes_keys[i].data(), secpar_to_bytes(S));
        aes_keygen<S>(&round_keys, key);
        memcpy(round_key_bytes.data(), &round_keys, sizeof(round_key_bytes));
        REQUIRE(round_key_bytes == expected_aes_round_keys[i]);
    }
}

TEST_CASE("rijndael192 keygen", "[aes]")
{
    rijndael192_round_keys round_keys = {0};
    std::array<std::array<uint8_t, 24>, 12 + 1> round_key_bytes = {0};
    block192 key;

    for (size_t i = 0; i < num_keys; ++i)
    {
        memcpy(&key, keys_192[i].data(), 24);
        rijndael192_keygen(&round_keys, key);
        memcpy(round_key_bytes.data(), &round_keys, sizeof(round_key_bytes));
        REQUIRE(round_key_bytes == expected_rijndael192_round_keys[i]);
    }
}

TEST_CASE("rijndael192 encrypt block", "[aes]")
{
    rijndael192_round_keys round_keys = {0};
    std::array<uint8_t, 24> output_block_bytes = {0};
    block192 key;
    block192 block;

    for (size_t i = 0; i < num_keys; ++i)
    {
        memcpy(&key, keys_192[i].data(), 24);
        rijndael192_keygen(&round_keys, key);
        memcpy(&block, rijndael192_input.data(), 24);
        rijndael192_encrypt_block(&round_keys, &block);
        memcpy(output_block_bytes.data(), &block, 24);
        CHECK(output_block_bytes == expected_rijndael192_outputs[i]);
    }
}

TEST_CASE("rijndael256 keygen", "[aes]")
{
    rijndael256_round_keys round_keys = {0};
    std::array<std::array<uint8_t, 32>, 14 + 1> round_key_bytes = {0};
    block256 key;

    for (size_t i = 0; i < num_keys; ++i)
    {
        memcpy(&key, keys_256[i].data(), 32);
        rijndael256_keygen(&round_keys, key);
        memcpy(round_key_bytes.data(), &round_keys, sizeof(round_key_bytes));
        REQUIRE(round_key_bytes == expected_rijndael256_round_keys[i]);
    }
}

TEMPLATE_TEST_CASE("aes ctr", "[aes]", secpar128_t, secpar192_t, secpar256_t)
{
    return; // TODO: Need to update the expected output to match the new CTR mode.

    constexpr auto S = TestType::value;
    using PRG = aes_ctr_prg<S>;

    const auto& [aes_key_bytes, expected_aes_round_keys, expected_aes_ctr_output] = [] -> auto
    {
        if constexpr (S == secpar::s128)
        {
            return std::make_tuple(keys_128, expected_aes128_round_keys, aes128_ctr_outputs);
        }
        else if constexpr (S == secpar::s192)
        {
            return std::make_tuple(keys_192, expected_aes192_round_keys, aes192_ctr_outputs);
        }
        else if constexpr (S == secpar::s256)
        {
            return std::make_tuple(keys_256, expected_aes256_round_keys, aes256_ctr_outputs);
        }
    }();
    std::array<block128, 3 * num_keys> ctr_blocks = {0};
    std::array<uint8_t, 16 * 3 * num_keys> expected_output = {0};
    std::array<typename PRG::expanded_key_t, num_keys> expanded_keys;
    std::array<block_secpar<S>, num_keys> aes_keys;
    memcpy(aes_keys.data(), aes_key_bytes.data(), sizeof(aes_key_bytes));

    block128 iv;
    memcpy(&iv, aes_ctr_iv.data(), sizeof(iv));

    // test combined keygen and ctr mode
    PRG::template init<num_keys, 3>(aes_keys.data(), expanded_keys.data(),
                                    iv, aes_ctr_tweak, aes_ctr_counter, ctr_blocks.data());
    for (size_t i = 0; i < num_keys; ++i)
    {
        std::array<std::array<uint8_t, 16>, AES_ROUNDS<S> + 1> round_key_bytes = {0};
        memcpy(round_key_bytes.data(), &expanded_keys[i].keys[0], sizeof(round_key_bytes));
        REQUIRE(round_key_bytes == expected_aes_round_keys[i]);

        memcpy(&expected_output[i * 16 * 3], &expected_aes_ctr_output[i][0], 16 * 3);
    }
    std::array<uint8_t, 16 * 3 * num_keys> output;
    memcpy(output.data(), ctr_blocks.data(), output.size());
    REQUIRE(output == expected_output);

    // test ctr mode
    for (size_t k = 0; k < 2; ++k)
    {
        PRG::template gen<num_keys, 3>(expanded_keys.data(), iv, aes_ctr_tweak,
                                       aes_ctr_counter + 3 * (k + 1), ctr_blocks.data());
        for (size_t i = 0; i < num_keys; ++i)
        {
            memcpy(&expected_output[i * 16 * 3], &expected_aes_ctr_output[i][(k + 1) * 3], 16 * 3);
        }
        memcpy(output.data(), ctr_blocks.data(), output.size());
        REQUIRE(output == expected_output);
    }
}
