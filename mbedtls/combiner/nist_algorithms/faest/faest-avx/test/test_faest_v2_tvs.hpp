#ifndef TEST_FAEST_V2_TVS_HPP
#define TEST_FAEST_V2_TVS_HPP

#include <array>
#include <cstdint>
#include <string>

#include "faest.hpp"
#include "faest_keys.hpp"
#include "parameters.hpp"

using namespace faest;

template <typename P> struct faest_tvs
{
    const static std::array<uint8_t, FAEST_SECRET_KEY_BYTES<P>> sk;
    const static std::array<uint8_t, FAEST_PUBLIC_KEY_BYTES<P>> pk;
    const static std::array<uint8_t, (P::OWF_CONSTS::WITNESS_BITS + 7) / 8> witness;
    const static std::array<uint8_t, FAEST_SIGNATURE_BYTES<P>> signature;

    constexpr static std::array<uint8_t, 16> random_seed = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    };

    // "This document describes and specifies the FAEST digital signature algorithm.";
    constexpr static std::array<uint8_t, 76> message = {
        0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
        0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x6e,
        0x64, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x46, 0x41, 0x45, 0x53, 0x54, 0x20, 0x64, 0x69, 0x67, 0x69,
        0x74, 0x61, 0x6c, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
        0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e,
    };
};

#endif
