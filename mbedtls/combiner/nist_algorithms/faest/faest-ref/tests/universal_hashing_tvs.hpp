#ifndef TESTS_UNIVERSAL_HASHING_TVS_HPP
#define TESTS_UNIVERSAL_HASHING_TVS_HPP

#include <array>
#include <cstdint>

namespace universal_hashing_tvs {
  namespace leaf_hash_128 {
    constexpr std::array<uint8_t, 48> uhash{
        0xe1, 0x52, 0x3a, 0x89, 0x80, 0xc1, 0x62, 0x83, 0xcb, 0xc8, 0x5e, 0x71,
        0x70, 0x3a, 0x04, 0xd1, 0xd2, 0x33, 0x1c, 0x8b, 0xd9, 0x1b, 0x1e, 0x01,
        0x56, 0x59, 0x09, 0x44, 0x47, 0x2d, 0x2d, 0xd3, 0x46, 0x2c, 0x15, 0x0b,
        0x96, 0xcb, 0x0e, 0xc4, 0x07, 0x1a, 0x05, 0x46, 0x74, 0xcd, 0x35, 0x2e,
    };
    constexpr std::array<uint8_t, 64> x{
        0xd4, 0xda, 0x35, 0x33, 0x8b, 0xea, 0x59, 0xad, 0x66, 0x06, 0x08, 0xc1, 0x2f,
        0x86, 0xe8, 0xeb, 0x59, 0x47, 0x75, 0xa7, 0x31, 0xdf, 0x92, 0x8c, 0x81, 0x9b,
        0x2d, 0x2a, 0xe2, 0xd8, 0x95, 0x9c, 0x2a, 0x52, 0xca, 0x6f, 0x92, 0xb7, 0xb1,
        0x8e, 0x4c, 0x58, 0x01, 0xda, 0x83, 0xd0, 0x6d, 0x44, 0x1a, 0x84, 0x89, 0xec,
        0xb9, 0xb9, 0xe0, 0xb0, 0xd2, 0xe1, 0x15, 0x79, 0x77, 0x10, 0x74, 0xf1,
    };
    constexpr std::array<uint8_t, 48> expected_h{
        0xa2, 0xf7, 0x42, 0xc1, 0x2f, 0xc8, 0x02, 0x67, 0xf3, 0x58, 0x4e, 0xdd,
        0x1c, 0x10, 0xb9, 0xb8, 0x94, 0x48, 0xec, 0x93, 0xc0, 0x0c, 0x64, 0xc8,
        0xe8, 0xea, 0xff, 0xb7, 0x8b, 0x6b, 0xd0, 0x65, 0x54, 0x45, 0x11, 0x9c,
        0x20, 0x0b, 0x65, 0xf0, 0x14, 0xb2, 0xc0, 0xa4, 0xd1, 0x88, 0xaa, 0x35,
    };
  } // namespace leaf_hash_128
  namespace leaf_hash_192 {
    constexpr std::array<uint8_t, 72> uhash{
        0xab, 0x33, 0x81, 0x46, 0x57, 0xc2, 0xb4, 0x39, 0x53, 0x43, 0xf1, 0x42, 0x9a, 0xe5, 0xf2,
        0x87, 0x70, 0x99, 0x40, 0xc3, 0x2d, 0x74, 0x72, 0x49, 0x8d, 0x3e, 0x71, 0xc7, 0xa6, 0x5b,
        0x6d, 0x52, 0xff, 0x54, 0x3c, 0xf8, 0xe5, 0x33, 0x41, 0xe5, 0x59, 0x06, 0xea, 0x2c, 0xcd,
        0x96, 0x08, 0x2f, 0x54, 0x2f, 0xe8, 0xb2, 0x31, 0x46, 0x4d, 0x83, 0xb8, 0x86, 0xa2, 0xf1,
        0x6d, 0xa8, 0xce, 0xe0, 0x61, 0xcf, 0xa6, 0x5d, 0x01, 0x6d, 0xa4, 0x5b,
    };
    constexpr std::array<uint8_t, 96> x{
        0x95, 0xba, 0x06, 0x97, 0xf0, 0xa1, 0xb7, 0x36, 0x09, 0x9a, 0x50, 0xb6, 0xf2, 0x19,
        0xab, 0xab, 0xdc, 0x45, 0x3c, 0x2e, 0x2a, 0xae, 0xd1, 0xe1, 0x02, 0xdd, 0xa9, 0x72,
        0xbe, 0xbc, 0x85, 0xed, 0x38, 0xe8, 0x9b, 0x68, 0x7c, 0x74, 0x50, 0x5e, 0x15, 0x83,
        0x3a, 0x73, 0x12, 0x07, 0x9f, 0x77, 0xb1, 0x77, 0x06, 0x1e, 0x0c, 0x9b, 0x54, 0x6a,
        0x10, 0xd3, 0x3e, 0xb0, 0x9a, 0xbc, 0x41, 0x8a, 0x73, 0x79, 0x87, 0x40, 0x42, 0x84,
        0xea, 0x0d, 0x08, 0x0b, 0x79, 0x40, 0xd9, 0x13, 0x91, 0x3b, 0x1d, 0x59, 0xf3, 0x66,
        0x1e, 0xe3, 0xbe, 0x75, 0xe5, 0xfb, 0x28, 0xec, 0x8f, 0x59, 0x44, 0x26,
    };
    constexpr std::array<uint8_t, 72> expected_h{
        0xc3, 0x79, 0x66, 0x56, 0x43, 0x9f, 0xd4, 0x55, 0x6f, 0xc6, 0xdc, 0x70, 0x49, 0xac, 0x09,
        0x5d, 0x4c, 0xdd, 0xc9, 0xf0, 0x79, 0x30, 0x0e, 0xf2, 0x24, 0x7b, 0x21, 0xe4, 0x21, 0x71,
        0xb7, 0xd3, 0x8c, 0xa9, 0x7c, 0x3b, 0x7c, 0x71, 0x94, 0xee, 0xb4, 0xbe, 0xed, 0x5d, 0x33,
        0xe7, 0x56, 0x6e, 0xc2, 0xa4, 0xcf, 0x47, 0xb4, 0xaf, 0xa7, 0xf2, 0x41, 0x39, 0xbf, 0x44,
        0xf6, 0x43, 0x5d, 0x1e, 0x02, 0x54, 0xd4, 0x61, 0x31, 0x70, 0x83, 0x00,
    };
  } // namespace leaf_hash_192
  namespace leaf_hash_256 {
    constexpr std::array<uint8_t, 96> uhash{
        0x74, 0x47, 0xc3, 0xa4, 0x3d, 0xf5, 0x2b, 0xa3, 0x47, 0x42, 0x72, 0x18, 0x7b, 0x21,
        0x7d, 0xfd, 0x68, 0xda, 0x72, 0x44, 0xd0, 0x29, 0x06, 0xd0, 0x10, 0xf0, 0xca, 0x30,
        0xbe, 0x9c, 0x04, 0xa8, 0x7d, 0xb4, 0xd9, 0xe8, 0xab, 0xac, 0xa2, 0xa3, 0x9c, 0x66,
        0xe3, 0xf8, 0x77, 0x45, 0x51, 0x50, 0xc7, 0xb7, 0xc3, 0x39, 0x06, 0x6c, 0xf7, 0xf9,
        0x08, 0x7d, 0xf2, 0x95, 0xb2, 0x0c, 0x14, 0xb0, 0x50, 0x7b, 0x07, 0xc9, 0xba, 0x32,
        0xb9, 0xc1, 0xe0, 0xd3, 0x95, 0x67, 0xc3, 0xb1, 0xde, 0x56, 0xa0, 0x1d, 0x1e, 0xb8,
        0x39, 0xc4, 0xfa, 0x16, 0xef, 0x16, 0xc8, 0x72, 0x89, 0xc7, 0xdd, 0x28,
    };
    constexpr std::array<uint8_t, 128> x{
        0x00, 0x62, 0x1f, 0x3d, 0x4c, 0x4a, 0x3a, 0x54, 0x22, 0xe1, 0xc1, 0x9e, 0xb6, 0xec, 0xa3,
        0xb8, 0xc8, 0x9d, 0x42, 0x93, 0x0f, 0x67, 0x09, 0x38, 0xeb, 0x5d, 0x6a, 0xa9, 0x44, 0x64,
        0xe4, 0x50, 0xb7, 0x71, 0x7c, 0xa0, 0x56, 0xb7, 0xfc, 0xbb, 0x3f, 0xa1, 0x2b, 0xc2, 0x67,
        0xec, 0x1d, 0x42, 0x9a, 0xf8, 0x2d, 0xdf, 0xf0, 0x94, 0x74, 0xb7, 0x06, 0x57, 0xcf, 0x61,
        0xcb, 0x68, 0xec, 0x70, 0x13, 0xf0, 0x52, 0x00, 0x7f, 0xb9, 0xeb, 0xd7, 0x24, 0xd1, 0xc6,
        0xc9, 0x88, 0x6a, 0x8e, 0xed, 0x45, 0xcd, 0x66, 0x7e, 0xb5, 0x9b, 0xa4, 0xac, 0x91, 0xb9,
        0x89, 0x78, 0xf7, 0xab, 0x54, 0x13, 0x30, 0xe6, 0x3d, 0x47, 0x51, 0xa0, 0x92, 0xff, 0xdc,
        0x6a, 0xb1, 0x00, 0x4d, 0xc0, 0xe4, 0xa1, 0x14, 0x7f, 0x47, 0x6a, 0xd7, 0xfc, 0xc8, 0xac,
        0x79, 0x23, 0xae, 0x97, 0x1b, 0x08, 0xc7, 0xa2,
    };
    constexpr std::array<uint8_t, 96> expected_h{
        0xcf, 0x2a, 0xb2, 0x2d, 0x0d, 0x2b, 0x56, 0xe1, 0xa1, 0xf5, 0x9b, 0x83, 0xdb, 0x67,
        0x0a, 0x74, 0x66, 0xd4, 0xc6, 0x65, 0xb9, 0x5f, 0x70, 0x9c, 0xdb, 0xa4, 0x2c, 0x75,
        0xc6, 0x7e, 0x89, 0x44, 0x46, 0xb8, 0x2c, 0xab, 0x89, 0x01, 0xdf, 0x98, 0xba, 0xb5,
        0x4d, 0xfb, 0x37, 0xe6, 0x61, 0x67, 0xce, 0xdb, 0x5f, 0x8c, 0x68, 0xd4, 0xb1, 0xcd,
        0x6a, 0xe1, 0xb9, 0x89, 0x2f, 0xcb, 0x9d, 0xea, 0x41, 0xb7, 0xd7, 0x00, 0x1a, 0x0b,
        0x2b, 0xe1, 0x89, 0xa0, 0x0f, 0x35, 0x70, 0xa9, 0x88, 0xa7, 0x2c, 0x12, 0x5d, 0x51,
        0xa4, 0xec, 0x0f, 0x5a, 0xed, 0x42, 0xc5, 0x40, 0xf0, 0x9a, 0x58, 0x96,
    };
  } // namespace leaf_hash_256
} // namespace universal_hashing_tvs

#endif
